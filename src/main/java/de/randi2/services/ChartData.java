// Generated by delombok at Mon Aug 29 15:32:21 MSK 2016
/* 
 * (c) 2008- RANDI2 Core Development Team
 * 
 * This file is part of RANDI2.
 * 
 * RANDI2 is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 * 
 * RANDI2 is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License along with
 * RANDI2. If not, see <http://www.gnu.org/licenses/>.
 */
package de.randi2.services;

import java.util.List;

/**
 * Contains the data for all type of charts.
 *
 * @author Lukasz Plotnicki
 */
public class ChartData {
	public static final int MINIMUM_HEIGHT = 200;
	public static final int HEIGHT_MULTIPLIER = 25;
	/**
	 * Description of the points on the X axis. The size of this list must be
	 * equal the amount of the data-points. <managed-property>
	 * <property-name>chartsService</property-name>
	 * <property-class>de.randi2.services.ChartsService</property-class>
	 * <value>#{chartsService}</value> </managed-property>
	 */
	private List<String> xLabels;
	/**
	 * The data-set for the chart. Each array defines the data-set for one
	 * "x label" (e.g. 10d,20d,30d -> represent for "month 1" - x label - the
	 * values of the 3 functions at this point of time)
	 */
	private List<double[]> data;
	private double[] dataPieChart;

	/**
	 * The height of the chart as String.
	 */
	public String getHeightChart() {
		int height = xLabels.size() * HEIGHT_MULTIPLIER;
		if (height < MINIMUM_HEIGHT) {
			height = MINIMUM_HEIGHT;
		}
		return String.valueOf(height);
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public ChartData() {
	}

	/**
	 * Description of the points on the X axis. The size of this list must be
	 * equal the amount of the data-points. <managed-property>
	 * <property-name>chartsService</property-name>
	 * <property-class>de.randi2.services.ChartsService</property-class>
	 * <value>#{chartsService}</value> </managed-property>
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public List<String> getXLabels() {
		return this.xLabels;
	}

	/**
	 * The data-set for the chart. Each array defines the data-set for one
	 * "x label" (e.g. 10d,20d,30d -> represent for "month 1" - x label - the
	 * values of the 3 functions at this point of time)
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public List<double[]> getData() {
		return this.data;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public double[] getDataPieChart() {
		return this.dataPieChart;
	}

	/**
	 * Description of the points on the X axis. The size of this list must be
	 * equal the amount of the data-points. <managed-property>
	 * <property-name>chartsService</property-name>
	 * <property-class>de.randi2.services.ChartsService</property-class>
	 * <value>#{chartsService}</value> </managed-property>
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setXLabels(final List<String> xLabels) {
		this.xLabels = xLabels;
	}

	/**
	 * The data-set for the chart. Each array defines the data-set for one
	 * "x label" (e.g. 10d,20d,30d -> represent for "month 1" - x label - the
	 * values of the 3 functions at this point of time)
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setData(final List<double[]> data) {
		this.data = data;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setDataPieChart(final double[] dataPieChart) {
		this.dataPieChart = dataPieChart;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public boolean equals(final java.lang.Object o) {
		if (o == this) return true;
		if (!(o instanceof ChartData)) return false;
		final ChartData other = (ChartData) o;
		if (!other.canEqual((java.lang.Object) this)) return false;
		final java.lang.Object this$xLabels = this.getXLabels();
		final java.lang.Object other$xLabels = other.getXLabels();
		if (this$xLabels == null ? other$xLabels != null : !this$xLabels.equals(other$xLabels)) return false;
		final java.lang.Object this$data = this.getData();
		final java.lang.Object other$data = other.getData();
		if (this$data == null ? other$data != null : !this$data.equals(other$data)) return false;
		if (!java.util.Arrays.equals(this.getDataPieChart(), other.getDataPieChart())) return false;
		return true;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	protected boolean canEqual(final java.lang.Object other) {
		return other instanceof ChartData;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public int hashCode() {
		final int PRIME = 59;
		int result = 1;
		final java.lang.Object $xLabels = this.getXLabels();
		result = result * PRIME + ($xLabels == null ? 43 : $xLabels.hashCode());
		final java.lang.Object $data = this.getData();
		result = result * PRIME + ($data == null ? 43 : $data.hashCode());
		result = result * PRIME + java.util.Arrays.hashCode(this.getDataPieChart());
		return result;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public java.lang.String toString() {
		return "ChartData(xLabels=" + this.getXLabels() + ", data=" + this.getData() + ", dataPieChart=" + java.util.Arrays.toString(this.getDataPieChart()) + ")";
	}
}
