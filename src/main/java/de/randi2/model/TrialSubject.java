// Generated by delombok at Mon Aug 29 15:32:21 MSK 2016
/* 
 * (c) 2008- RANDI2 Core Development Team
 * 
 * This file is part of RANDI2.
 * 
 * RANDI2 is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 * 
 * RANDI2 is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License along with
 * RANDI2. If not, see <http://www.gnu.org/licenses/>.
 */
package de.randi2.model;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.GregorianCalendar;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.Transient;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import org.hibernate.validator.constraints.NotEmpty;
import de.randi2.unsorted.ConstraintViolatedException;
/**
 * The Class TrialSubject.
 */
/**
 * Sets the properties.
 *
 * @param properties
 * the new properties
 */
@Entity
@NamedQuery(name = "trialSubject.specificInvestigator", query = "select ts from TrialSubject as ts join ts.arm arm where arm.trial = ? and ts.investigator = ? order by ts.arm")
public class TrialSubject extends AbstractDomainObject {
	/**
	 * The Constant serialVersionUID.
	 */
	private static final long serialVersionUID = 4469807155833123516L;
	/**
	 * The identification.
	 */
	@NotNull
	@NotEmpty
	@Size(max = MAX_VARCHAR_LENGTH)
	private String identification;
	/**
	 * The rand number.
	 */
	@NotNull
	@NotEmpty
	@Size(max = MAX_VARCHAR_LENGTH)
	private String randNumber;
	/**
	 * The counter.
	 */
	private int counter;

	/**
	 * Gets the counter.
	 *
	 * @return the counter
	 */
	public int getCounter() {
		return counter;
	}

	/**
	 * Sets the counter.
	 *
	 * @param counter
	 * the new counter
	 */
	public void setCounter(int counter) {
		this.counter = counter;
	}

	/**
	 * The trial site.
	 */
	@ManyToOne
	private TrialSite trialSite;
	/**
	 * The investigator.
	 */
	@ManyToOne
	private Login investigator;
	/**
	 * The arm.
	 */
	@NotNull
	@ManyToOne(cascade = CascadeType.ALL)
	private TreatmentArm arm;
	/**
	 * The properties.
	 */
	@OneToMany(cascade = CascadeType.PERSIST, fetch = FetchType.EAGER)
	private Set<SubjectProperty<?>> properties = new HashSet<SubjectProperty<?>>();
	@OneToOne
	private SubjectProperty<String> responseProperty;

	/**
	 * Gets the stratum.<br />
	 * Generate the stratum identification string for the actual trial subject.
	 * [criterion_id]_[constraint_id];[criterion_id]_[constraint_id];...
	 *
	 * @return the stratum
	 */
	@Transient
	public String getStratum() {
		List<String> stratum = new ArrayList<String>();
		for (SubjectProperty<?> p : properties) {
			try {
				stratum.add(p.getCriterion().getId() + "_" + p.getStratum());
			} catch (ConstraintViolatedException e) {
				e.printStackTrace();
			}
		}
		Collections.sort(stratum);
		StringBuffer result = new StringBuffer();
		for (String l : stratum) {
			result.append(l + ";");
		}
		return result.toString();
	}

	/* (non-Javadoc)
	 * @see de.randi2.model.AbstractDomainObject#getUIName()
	 */
	@Override
	public String getUIName() {
		return identification;
	}

	/**
	 * Gets the properties ui string.
	 *
	 * @return the properties ui string
	 */
	public String getPropertiesUIString() {
		StringBuilder stringB = new StringBuilder();
		SimpleDateFormat sdf = new SimpleDateFormat("dd.MM.yyyy");
		List<String> list = new ArrayList<String>();
		for (SubjectProperty<?> p : getProperties()) {
			StringBuilder str = new StringBuilder();
			str.append(p.getCriterion().getName()).append(": ");
			if (GregorianCalendar.class.isInstance(p.getValue())) {
				str.append(sdf.format(((GregorianCalendar) p.getValue()).getTime()));
			} else {
				str.append(p.getValue().toString());
			}
			str.append("|");
			list.add(str.toString());
		}
		Collections.sort(list);
		for (String str : list) {
			stringB.append(str);
		}
		return stringB.toString();
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public TrialSubject() {
	}

	/**
	 * The identification.
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public String getIdentification() {
		return this.identification;
	}

	/**
	 * The rand number.
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public String getRandNumber() {
		return this.randNumber;
	}

	/**
	 * The trial site.
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public TrialSite getTrialSite() {
		return this.trialSite;
	}

	/**
	 * The investigator.
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public Login getInvestigator() {
		return this.investigator;
	}

	/**
	 * The arm.
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public TreatmentArm getArm() {
		return this.arm;
	}

	/**
	 * The properties.
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public Set<SubjectProperty<?>> getProperties() {
		return this.properties;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public SubjectProperty<String> getResponseProperty() {
		return this.responseProperty;
	}

	/**
	 * The identification.
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setIdentification(final String identification) {
		this.identification = identification;
	}

	/**
	 * The rand number.
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setRandNumber(final String randNumber) {
		this.randNumber = randNumber;
	}

	/**
	 * The trial site.
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setTrialSite(final TrialSite trialSite) {
		this.trialSite = trialSite;
	}

	/**
	 * The investigator.
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setInvestigator(final Login investigator) {
		this.investigator = investigator;
	}

	/**
	 * The arm.
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setArm(final TreatmentArm arm) {
		this.arm = arm;
	}

	/**
	 * The properties.
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setProperties(final Set<SubjectProperty<?>> properties) {
		this.properties = properties;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setResponseProperty(final SubjectProperty<String> responseProperty) {
		this.responseProperty = responseProperty;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public boolean equals(final java.lang.Object o) {
		if (o == this) return true;
		if (!(o instanceof TrialSubject)) return false;
		final TrialSubject other = (TrialSubject) o;
		if (!other.canEqual((java.lang.Object) this)) return false;
		if (!super.equals(o)) return false;
		final java.lang.Object this$identification = this.getIdentification();
		final java.lang.Object other$identification = other.getIdentification();
		if (this$identification == null ? other$identification != null : !this$identification.equals(other$identification)) return false;
		final java.lang.Object this$randNumber = this.getRandNumber();
		final java.lang.Object other$randNumber = other.getRandNumber();
		if (this$randNumber == null ? other$randNumber != null : !this$randNumber.equals(other$randNumber)) return false;
		if (this.getCounter() != other.getCounter()) return false;
		final java.lang.Object this$trialSite = this.getTrialSite();
		final java.lang.Object other$trialSite = other.getTrialSite();
		if (this$trialSite == null ? other$trialSite != null : !this$trialSite.equals(other$trialSite)) return false;
		final java.lang.Object this$investigator = this.getInvestigator();
		final java.lang.Object other$investigator = other.getInvestigator();
		if (this$investigator == null ? other$investigator != null : !this$investigator.equals(other$investigator)) return false;
		final java.lang.Object this$arm = this.getArm();
		final java.lang.Object other$arm = other.getArm();
		if (this$arm == null ? other$arm != null : !this$arm.equals(other$arm)) return false;
		final java.lang.Object this$properties = this.getProperties();
		final java.lang.Object other$properties = other.getProperties();
		if (this$properties == null ? other$properties != null : !this$properties.equals(other$properties)) return false;
		final java.lang.Object this$responseProperty = this.getResponseProperty();
		final java.lang.Object other$responseProperty = other.getResponseProperty();
		if (this$responseProperty == null ? other$responseProperty != null : !this$responseProperty.equals(other$responseProperty)) return false;
		return true;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	protected boolean canEqual(final java.lang.Object other) {
		return other instanceof TrialSubject;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public int hashCode() {
		final int PRIME = 59;
		int result = 1;
		result = result * PRIME + super.hashCode();
		final java.lang.Object $identification = this.getIdentification();
		result = result * PRIME + ($identification == null ? 43 : $identification.hashCode());
		final java.lang.Object $randNumber = this.getRandNumber();
		result = result * PRIME + ($randNumber == null ? 43 : $randNumber.hashCode());
		result = result * PRIME + this.getCounter();
		final java.lang.Object $trialSite = this.getTrialSite();
		result = result * PRIME + ($trialSite == null ? 43 : $trialSite.hashCode());
		final java.lang.Object $investigator = this.getInvestigator();
		result = result * PRIME + ($investigator == null ? 43 : $investigator.hashCode());
		final java.lang.Object $arm = this.getArm();
		result = result * PRIME + ($arm == null ? 43 : $arm.hashCode());
		final java.lang.Object $properties = this.getProperties();
		result = result * PRIME + ($properties == null ? 43 : $properties.hashCode());
		final java.lang.Object $responseProperty = this.getResponseProperty();
		result = result * PRIME + ($responseProperty == null ? 43 : $responseProperty.hashCode());
		return result;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public java.lang.String toString() {
		return "TrialSubject(identification=" + this.getIdentification() + ", randNumber=" + this.getRandNumber() + ", counter=" + this.getCounter() + ", trialSite=" + this.getTrialSite() + ", investigator=" + this.getInvestigator() + ", properties=" + this.getProperties() + ", responseProperty=" + this.getResponseProperty() + ")";
	}
}
