// Generated by delombok at Mon Aug 29 15:32:21 MSK 2016
/* 
 * (c) 2008- RANDI2 Core Development Team
 * 
 * This file is part of RANDI2.
 * 
 * RANDI2 is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 * 
 * RANDI2 is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License along with
 * RANDI2. If not, see <http://www.gnu.org/licenses/>.
 */
package de.randi2.model.security;

import java.io.Serializable;
import javax.persistence.Embedded;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.ManyToOne;
import org.springframework.security.acls.model.AccessControlEntry;
import org.springframework.security.acls.model.Acl;

@Entity
public class AccessControlEntryHibernate implements AccessControlEntry, Serializable {
	private static final long serialVersionUID = 6843101926609540483L;
	@ManyToOne(targetEntity = AclHibernate.class)
	private Acl acl;
	@Embedded
	private PermissionHibernate permission;
	private String roleName;
	@Id
	@GeneratedValue(strategy = GenerationType.TABLE)
	private Long id;
	@ManyToOne(targetEntity = SidHibernate.class)
	private SidHibernate sid;
	private boolean granting = true;

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public AccessControlEntryHibernate() {
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public Acl getAcl() {
		return this.acl;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public PermissionHibernate getPermission() {
		return this.permission;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public String getRoleName() {
		return this.roleName;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public Long getId() {
		return this.id;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public SidHibernate getSid() {
		return this.sid;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public boolean isGranting() {
		return this.granting;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setAcl(final Acl acl) {
		this.acl = acl;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setPermission(final PermissionHibernate permission) {
		this.permission = permission;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setRoleName(final String roleName) {
		this.roleName = roleName;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setId(final Long id) {
		this.id = id;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setSid(final SidHibernate sid) {
		this.sid = sid;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setGranting(final boolean granting) {
		this.granting = granting;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public boolean equals(final java.lang.Object o) {
		if (o == this) return true;
		if (!(o instanceof AccessControlEntryHibernate)) return false;
		final AccessControlEntryHibernate other = (AccessControlEntryHibernate) o;
		if (!other.canEqual((java.lang.Object) this)) return false;
		final java.lang.Object this$acl = this.getAcl();
		final java.lang.Object other$acl = other.getAcl();
		if (this$acl == null ? other$acl != null : !this$acl.equals(other$acl)) return false;
		final java.lang.Object this$permission = this.getPermission();
		final java.lang.Object other$permission = other.getPermission();
		if (this$permission == null ? other$permission != null : !this$permission.equals(other$permission)) return false;
		final java.lang.Object this$roleName = this.getRoleName();
		final java.lang.Object other$roleName = other.getRoleName();
		if (this$roleName == null ? other$roleName != null : !this$roleName.equals(other$roleName)) return false;
		final java.lang.Object this$id = this.getId();
		final java.lang.Object other$id = other.getId();
		if (this$id == null ? other$id != null : !this$id.equals(other$id)) return false;
		final java.lang.Object this$sid = this.getSid();
		final java.lang.Object other$sid = other.getSid();
		if (this$sid == null ? other$sid != null : !this$sid.equals(other$sid)) return false;
		if (this.isGranting() != other.isGranting()) return false;
		return true;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	protected boolean canEqual(final java.lang.Object other) {
		return other instanceof AccessControlEntryHibernate;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public int hashCode() {
		final int PRIME = 59;
		int result = 1;
		final java.lang.Object $acl = this.getAcl();
		result = result * PRIME + ($acl == null ? 43 : $acl.hashCode());
		final java.lang.Object $permission = this.getPermission();
		result = result * PRIME + ($permission == null ? 43 : $permission.hashCode());
		final java.lang.Object $roleName = this.getRoleName();
		result = result * PRIME + ($roleName == null ? 43 : $roleName.hashCode());
		final java.lang.Object $id = this.getId();
		result = result * PRIME + ($id == null ? 43 : $id.hashCode());
		final java.lang.Object $sid = this.getSid();
		result = result * PRIME + ($sid == null ? 43 : $sid.hashCode());
		result = result * PRIME + (this.isGranting() ? 79 : 97);
		return result;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public java.lang.String toString() {
		return "AccessControlEntryHibernate(acl=" + this.getAcl() + ", permission=" + this.getPermission() + ", roleName=" + this.getRoleName() + ", id=" + this.getId() + ", sid=" + this.getSid() + ", granting=" + this.isGranting() + ")";
	}
}
