// Generated by delombok at Mon Aug 29 15:32:21 MSK 2016
/* 
 * (c) 2008- RANDI2 Core Development Team
 * 
 * This file is part of RANDI2.
 * 
 * RANDI2 is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 * 
 * RANDI2 is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License along with
 * RANDI2. If not, see <http://www.gnu.org/licenses/>.
 */
package de.randi2.model.security;

import java.io.Serializable;
import javax.persistence.Embeddable;
import org.springframework.security.acls.domain.AclFormattingUtils;
import org.springframework.security.acls.model.Permission;

@Embeddable
public class PermissionHibernate implements Permission, Serializable {
	private static final long serialVersionUID = -2551309525159046911L;
	private char code;
	private int mask;

	public PermissionHibernate(int mask, char code) {
		this.mask = mask;
		this.code = code;
	}

	public PermissionHibernate() {
	}

	public static final PermissionHibernate READ = new PermissionHibernate(1 << 0, 'R'); // 1
	public static final PermissionHibernate WRITE = new PermissionHibernate(1 << 1, 'W'); // 2
	public static final PermissionHibernate CREATE = new PermissionHibernate(1 << 2, 'C'); // 4
	public static final PermissionHibernate DELETE = new PermissionHibernate(1 << 3, 'D'); // 8
	public static final PermissionHibernate ADMINISTRATION = new PermissionHibernate(1 << 4, 'A'); // 16

	@Override
	public String getPattern() {
		return AclFormattingUtils.printBinary(mask, code);
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public char getCode() {
		return this.code;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public int getMask() {
		return this.mask;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setCode(final char code) {
		this.code = code;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setMask(final int mask) {
		this.mask = mask;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public boolean equals(final java.lang.Object o) {
		if (o == this) return true;
		if (!(o instanceof PermissionHibernate)) return false;
		final PermissionHibernate other = (PermissionHibernate) o;
		if (!other.canEqual((java.lang.Object) this)) return false;
		if (this.getCode() != other.getCode()) return false;
		if (this.getMask() != other.getMask()) return false;
		return true;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	protected boolean canEqual(final java.lang.Object other) {
		return other instanceof PermissionHibernate;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public int hashCode() {
		final int PRIME = 59;
		int result = 1;
		result = result * PRIME + this.getCode();
		result = result * PRIME + this.getMask();
		return result;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public java.lang.String toString() {
		return "PermissionHibernate(code=" + this.getCode() + ", mask=" + this.getMask() + ")";
	}
}
