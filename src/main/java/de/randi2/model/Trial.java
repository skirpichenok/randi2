// Generated by delombok at Mon Aug 29 15:32:21 MSK 2016
/* 
 * (c) 2008- RANDI2 Core Development Team
 * 
 * This file is part of RANDI2.
 * 
 * RANDI2 is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 * 
 * RANDI2 is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License along with
 * RANDI2. If not, see <http://www.gnu.org/licenses/>.
 */
package de.randi2.model;

import static de.randi2.utility.ArithmeticUtil.cartesianProduct;
import java.io.File;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.FetchType;
import javax.persistence.Lob;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.Transient;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import org.hibernate.validator.constraints.NotEmpty;
import org.springframework.beans.factory.annotation.Configurable;
import de.randi2.model.criteria.AbstractCriterion;
import de.randi2.model.criteria.DichotomousCriterion;
import de.randi2.model.criteria.constraints.AbstractConstraint;
import de.randi2.model.enumerations.TrialStatus;
import de.randi2.model.randomization.AbstractRandomizationConfig;
import de.randi2.utility.Pair;
import de.randi2.utility.StrataNameIDWrapper;
import de.randi2.utility.validations.DateDependence;

/**
 * The Class Trial.
 */
@Entity
@Configurable
@DateDependence(firstDate = "startDate", secondDate = "endDate")
@NamedQuery(name = "trial.AllTrialsWithSpecificParticipatingTrialSite", query = "select trial from Trial as trial join trial.participatingSites site where site.id = ?")
public class Trial extends AbstractDomainObject {
	public static final Comparator<TrialSubject> SUBJECT_COUNT_COMPERATOR = new Comparator<TrialSubject>() {
		/**
		 * {@inheritDoc}
		 */
		@Override
		public int compare(TrialSubject o1, TrialSubject o2) {
			return (o1.getCounter() - o2.getCounter());
		}
	};
	/**
	 * The Constant serialVersionUID.
	 */
	private static final long serialVersionUID = -2424750074810584832L;
	/**
	 * The name.
	 */
	@NotNull
	@NotEmpty
	@Size(max = MAX_VARCHAR_LENGTH)
	private String name = "";
	/**
	 * The abbreviation.
	 */
	@Size(max = MAX_VARCHAR_LENGTH)
	private String abbreviation = "";
	/**
	 * Checks if is stratify trial site.
	 */
	private boolean stratifyTrialSite;
	/**
	 * The description.
	 */
	@Lob
	private String description = "";
	private GregorianCalendar startDate = null;
	private GregorianCalendar endDate = null;
	private File protocol = null;
	/**
	 * The sponsor investigator.
	 */
	@NotNull
	@ManyToOne
	private Person sponsorInvestigator = null;
	/**
	 * The leading site.
	 */
	@NotNull
	@ManyToOne
	private TrialSite leadingSite = null;
	/**
	 * The status.
	 */
	@Enumerated(EnumType.STRING)
	@NotNull
	private TrialStatus status = TrialStatus.IN_PREPARATION;
	/**
	 * The participating sites.
	 */
	@ManyToMany(fetch = FetchType.EAGER)
	private Set<TrialSite> participatingSites = new HashSet<TrialSite>();
	/**
	 * The treatment arms.
	 */
	@OneToMany(cascade = CascadeType.ALL, mappedBy = "trial", fetch = FetchType.EAGER)
	private Set<TreatmentArm> treatmentArms = new HashSet<TreatmentArm>();
	/**
	 * The subject criteria.
	 */
	@OneToMany(cascade = CascadeType.ALL)
	private List<AbstractCriterion<? extends Serializable, ? extends AbstractConstraint<? extends Serializable>>> subjectCriteria = new ArrayList<AbstractCriterion<? extends Serializable, ? extends AbstractConstraint<? extends Serializable>>>();
	/**
	 * The treatment response criteria.
	 */
	@OneToOne(cascade = CascadeType.ALL)
	private DichotomousCriterion treatmentResponse;
	/**
	 * The random conf.
	 */
	@OneToOne(cascade = CascadeType.ALL, fetch = FetchType.EAGER)
	private AbstractRandomizationConfig randomConf;
	/**
	 * If true then the trial subject ids will be generated automatically by the
	 * system.
	 */
	private boolean generateIds = true;

	/**
	 * Get criteria.
	 *
	 * @return the criteria
	 */
	public List<AbstractCriterion<? extends Serializable, ? extends AbstractConstraint<? extends Serializable>>> getCriteria() {
		return subjectCriteria;
	}

	/**
	 * Set criteria.
	 *
	 * @param inclusionCriteria
	 * the inclusion criteria
	 */
	public void setCriteria(List<AbstractCriterion<? extends Serializable, ? extends AbstractConstraint<? extends Serializable>>> inclusionCriteria) {
		this.subjectCriteria = inclusionCriteria;
	}

	/**
	 * Adds the criterion, if the criterion is equals null nothing happens.
	 *
	 * @param criterion
	 * the criterion
	 */
	public void addCriterion(AbstractCriterion<? extends Serializable, ? extends AbstractConstraint<? extends Serializable>> criterion) {
		if (criterion != null) this.subjectCriteria.add(criterion);
	}

	/**
	 * Adds a participating site to this trial and added this Trial to the participating site.
	 *
	 * @param participatingSite
	 * the participating site
	 */
	public void addParticipatingSite(TrialSite participatingSite) {
		if (participatingSite != null) {
			this.participatingSites.add(participatingSite);
			if (!participatingSite.getTrials().contains(this)) {
				participatingSite.getTrials().add(this);
			}
		}
	}

	/**
	 * Gets the randomization configuration.
	 *
	 * @return the randomization configuration
	 */
	public AbstractRandomizationConfig getRandomizationConfiguration() {
		if (randomConf != null && randomConf.getTrial() == null) {
			randomConf.setTrial(this);
		}
		return randomConf;
	}

	/**
	 * Sets the randomization configuration. If the trial object of the
	 * randomisation config is equals null the setter set the this trial.
	 *
	 * @param _randomizationConfiguration
	 * the new randomization configuration
	 */
	public void setRandomizationConfiguration(AbstractRandomizationConfig _randomizationConfiguration) {
		randomConf = _randomizationConfiguration;
		if (randomConf != null && randomConf.getTrial() == null) {
			randomConf.setTrial(this);
		}
	}

	/**
	 * Gets all subjects from this trial.
	 *
	 * @return the subjects
	 */
	@Transient
	public List<TrialSubject> getSubjects() {
		List<TrialSubject> subjects = new ArrayList<TrialSubject>();
		for (TreatmentArm arm : treatmentArms) {
			subjects.addAll(arm.getSubjects());
		}
		Collections.sort(subjects, SUBJECT_COUNT_COMPERATOR);
		return subjects;
	}

	/**
	 * Gets the total subject amount.
	 *
	 * @return the total subject amount
	 */
	@Transient
	public int getTotalSubjectAmount() {
		return getSubjects().size();
	}

	@Transient
	public int getPlannedSubjectAmount() {
		int amount = 0;
		for (TreatmentArm arm : treatmentArms) {
			amount += arm.getPlannedSubjects();
		}
		return amount;
	}

	/**
	 * Specifies if the trial is a fresh trial (without any subjects)
	 *
	 * @return
	 */
	@Transient
	public boolean isFresh() {
		return !(getTotalSubjectAmount() > 0);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see de.randi2.model.AbstractDomainObject#getUIName()
	 */
	@Override
	public String getUIName() {
		return this.getAbbreviation();
	}

	@SuppressWarnings("unchecked")
	public Pair<List<String>, List<String>> getAllStrataIdsAndNames() {
		List<String> strataIdsResult = new ArrayList<String>();
		List<String> strataNamesResult = new ArrayList<String>();
		HashMap<AbstractCriterion<?, ?>, List<AbstractConstraint<?>>> temp = new HashMap<AbstractCriterion<?, ?>, List<AbstractConstraint<?>>>();
		for (AbstractCriterion<?, ?> cr : getCriteria()) {
			List<AbstractConstraint<?>> list = new ArrayList<AbstractConstraint<?>>();
			for (AbstractConstraint<?> co : cr.getStrata()) {
				list.add(co);
			}
			temp.put(cr, list);
		}
		Set<Set<StrataNameIDWrapper>> strataIds = new HashSet<Set<StrataNameIDWrapper>>();
		// minimum one constraint
		if (temp.size() >= 1) {
			for (AbstractCriterion<?, ?> cr : temp.keySet()) {
				Set<StrataNameIDWrapper> strataLevel = new HashSet<StrataNameIDWrapper>();
				for (AbstractConstraint<?> co : temp.get(cr)) {
					StrataNameIDWrapper wrapper = new StrataNameIDWrapper();
					wrapper.setStrataId(cr.getId() + "_" + co.getId());
					wrapper.setStrataName(cr.getName() + "_" + co.getUIName());
					strataLevel.add(wrapper);
				}
				if (temp.get(cr).isEmpty()) {
					StrataNameIDWrapper wrapper = new StrataNameIDWrapper();
					wrapper.setStrataId(cr.getId() + "_" + -1);
					wrapper.setStrataName("");
					strataLevel.add(wrapper);
				}
				if (!strataLevel.isEmpty()) {
					strataIds.add(strataLevel);
				}
			}
			// cartesianProduct only necessary for more then one criterions
			if (strataIds.size() >= 2) {
				strataIds = cartesianProduct(strataIds.toArray(new HashSet[0]));
			} else {
				Set<StrataNameIDWrapper> tempStrataIds = strataIds.iterator().next();
				Set<Set<StrataNameIDWrapper>> tempStrataIdsSet = new HashSet<Set<StrataNameIDWrapper>>();
				for (StrataNameIDWrapper wrapper : tempStrataIds) {
					Set<StrataNameIDWrapper> next = new HashSet<StrataNameIDWrapper>();
					next.add(wrapper);
					tempStrataIdsSet.add(next);
				}
				strataIds = tempStrataIdsSet;
			}
			for (Set<StrataNameIDWrapper> set : strataIds) {
				List<StrataNameIDWrapper> stringStrat = new ArrayList<StrataNameIDWrapper>();
				for (StrataNameIDWrapper string : set) {
					stringStrat.add(string);
				}
				Collections.sort(stringStrat);
				String stratId = "";
				String stratName = "";
				for (StrataNameIDWrapper s : stringStrat) {
					stratId += s.getStrataId() + ";";
					if (!s.getStrataName().isEmpty()) stratName += s.getStrataName() + ";";
				}
				// strata and stratified with trial site
				if (isStratifyTrialSite()) {
					for (TrialSite site : getParticipatingSites()) {
						String strataId = site.getId() + "__" + stratId;
						strataIdsResult.add(strataId);
						strataNamesResult.add(site.getName() + " | " + stratName);
					}
				} else 
				// strata and stratified without trial site
				{
					strataIdsResult.add(stratId);
					strataNamesResult.add(stratName);
				}
			}
		} else if (isStratifyTrialSite()) {
			// stratified only by trial site
			for (TrialSite site : getParticipatingSites()) {
				String strataId = site.getId() + "__";
				strataIdsResult.add(strataId);
				strataNamesResult.add(site.getName());
			}
		}
		return Pair.of(strataIdsResult, strataNamesResult);
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public boolean equals(final java.lang.Object o) {
		if (o == this) return true;
		if (!(o instanceof Trial)) return false;
		final Trial other = (Trial) o;
		if (!other.canEqual((java.lang.Object) this)) return false;
		if (!super.equals(o)) return false;
		final java.lang.Object this$name = this.getName();
		final java.lang.Object other$name = other.getName();
		if (this$name == null ? other$name != null : !this$name.equals(other$name)) return false;
		final java.lang.Object this$abbreviation = this.getAbbreviation();
		final java.lang.Object other$abbreviation = other.getAbbreviation();
		if (this$abbreviation == null ? other$abbreviation != null : !this$abbreviation.equals(other$abbreviation)) return false;
		if (this.isStratifyTrialSite() != other.isStratifyTrialSite()) return false;
		final java.lang.Object this$description = this.getDescription();
		final java.lang.Object other$description = other.getDescription();
		if (this$description == null ? other$description != null : !this$description.equals(other$description)) return false;
		final java.lang.Object this$startDate = this.getStartDate();
		final java.lang.Object other$startDate = other.getStartDate();
		if (this$startDate == null ? other$startDate != null : !this$startDate.equals(other$startDate)) return false;
		final java.lang.Object this$endDate = this.getEndDate();
		final java.lang.Object other$endDate = other.getEndDate();
		if (this$endDate == null ? other$endDate != null : !this$endDate.equals(other$endDate)) return false;
		final java.lang.Object this$protocol = this.getProtocol();
		final java.lang.Object other$protocol = other.getProtocol();
		if (this$protocol == null ? other$protocol != null : !this$protocol.equals(other$protocol)) return false;
		final java.lang.Object this$leadingSite = this.getLeadingSite();
		final java.lang.Object other$leadingSite = other.getLeadingSite();
		if (this$leadingSite == null ? other$leadingSite != null : !this$leadingSite.equals(other$leadingSite)) return false;
		final java.lang.Object this$status = this.getStatus();
		final java.lang.Object other$status = other.getStatus();
		if (this$status == null ? other$status != null : !this$status.equals(other$status)) return false;
		final java.lang.Object this$treatmentArms = this.getTreatmentArms();
		final java.lang.Object other$treatmentArms = other.getTreatmentArms();
		if (this$treatmentArms == null ? other$treatmentArms != null : !this$treatmentArms.equals(other$treatmentArms)) return false;
		final java.lang.Object this$treatmentResponse = this.getTreatmentResponse();
		final java.lang.Object other$treatmentResponse = other.getTreatmentResponse();
		if (this$treatmentResponse == null ? other$treatmentResponse != null : !this$treatmentResponse.equals(other$treatmentResponse)) return false;
		if (this.isGenerateIds() != other.isGenerateIds()) return false;
		return true;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	protected boolean canEqual(final java.lang.Object other) {
		return other instanceof Trial;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public int hashCode() {
		final int PRIME = 59;
		int result = 1;
		result = result * PRIME + super.hashCode();
		final java.lang.Object $name = this.getName();
		result = result * PRIME + ($name == null ? 43 : $name.hashCode());
		final java.lang.Object $abbreviation = this.getAbbreviation();
		result = result * PRIME + ($abbreviation == null ? 43 : $abbreviation.hashCode());
		result = result * PRIME + (this.isStratifyTrialSite() ? 79 : 97);
		final java.lang.Object $description = this.getDescription();
		result = result * PRIME + ($description == null ? 43 : $description.hashCode());
		final java.lang.Object $startDate = this.getStartDate();
		result = result * PRIME + ($startDate == null ? 43 : $startDate.hashCode());
		final java.lang.Object $endDate = this.getEndDate();
		result = result * PRIME + ($endDate == null ? 43 : $endDate.hashCode());
		final java.lang.Object $protocol = this.getProtocol();
		result = result * PRIME + ($protocol == null ? 43 : $protocol.hashCode());
		final java.lang.Object $leadingSite = this.getLeadingSite();
		result = result * PRIME + ($leadingSite == null ? 43 : $leadingSite.hashCode());
		final java.lang.Object $status = this.getStatus();
		result = result * PRIME + ($status == null ? 43 : $status.hashCode());
		final java.lang.Object $treatmentArms = this.getTreatmentArms();
		result = result * PRIME + ($treatmentArms == null ? 43 : $treatmentArms.hashCode());
		final java.lang.Object $treatmentResponse = this.getTreatmentResponse();
		result = result * PRIME + ($treatmentResponse == null ? 43 : $treatmentResponse.hashCode());
		result = result * PRIME + (this.isGenerateIds() ? 79 : 97);
		return result;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public java.lang.String toString() {
		return "Trial(super=" + super.toString() + ", name=" + this.getName() + ", abbreviation=" + this.getAbbreviation() + ", startDate=" + this.getStartDate() + ", endDate=" + this.getEndDate() + ", status=" + this.getStatus() + ")";
	}

	/**
	 * The name.
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public String getName() {
		return this.name;
	}

	/**
	 * The name.
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setName(final String name) {
		this.name = name;
	}

	/**
	 * The abbreviation.
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public String getAbbreviation() {
		return this.abbreviation;
	}

	/**
	 * The abbreviation.
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setAbbreviation(final String abbreviation) {
		this.abbreviation = abbreviation;
	}

	/**
	 * Checks if is stratify trial site.
	 *
	 * @return true, if is stratify trial site
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public boolean isStratifyTrialSite() {
		return this.stratifyTrialSite;
	}

	/**
	 * Checks if is stratify trial site.
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setStratifyTrialSite(final boolean stratifyTrialSite) {
		this.stratifyTrialSite = stratifyTrialSite;
	}

	/**
	 * The description.
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public String getDescription() {
		return this.description;
	}

	/**
	 * The description.
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setDescription(final String description) {
		this.description = description;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public GregorianCalendar getStartDate() {
		return this.startDate;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setStartDate(final GregorianCalendar startDate) {
		this.startDate = startDate;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public GregorianCalendar getEndDate() {
		return this.endDate;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setEndDate(final GregorianCalendar endDate) {
		this.endDate = endDate;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public File getProtocol() {
		return this.protocol;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setProtocol(final File protocol) {
		this.protocol = protocol;
	}

	/**
	 * The sponsor investigator.
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public Person getSponsorInvestigator() {
		return this.sponsorInvestigator;
	}

	/**
	 * The sponsor investigator.
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setSponsorInvestigator(final Person sponsorInvestigator) {
		this.sponsorInvestigator = sponsorInvestigator;
	}

	/**
	 * The leading site.
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public TrialSite getLeadingSite() {
		return this.leadingSite;
	}

	/**
	 * The leading site.
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setLeadingSite(final TrialSite leadingSite) {
		this.leadingSite = leadingSite;
	}

	/**
	 * The status.
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public TrialStatus getStatus() {
		return this.status;
	}

	/**
	 * The status.
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setStatus(final TrialStatus status) {
		this.status = status;
	}

	/**
	 * The participating sites.
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public Set<TrialSite> getParticipatingSites() {
		return this.participatingSites;
	}

	/**
	 * The participating sites.
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setParticipatingSites(final Set<TrialSite> participatingSites) {
		this.participatingSites = participatingSites;
	}

	/**
	 * The treatment arms.
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public Set<TreatmentArm> getTreatmentArms() {
		return this.treatmentArms;
	}

	/**
	 * The treatment arms.
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setTreatmentArms(final Set<TreatmentArm> treatmentArms) {
		this.treatmentArms = treatmentArms;
	}

	/**
	 * The treatment response criteria.
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public DichotomousCriterion getTreatmentResponse() {
		return this.treatmentResponse;
	}

	/**
	 * The treatment response criteria.
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setTreatmentResponse(final DichotomousCriterion treatmentResponse) {
		this.treatmentResponse = treatmentResponse;
	}

	/**
	 * If true then the trial subject ids will be generated automatically by the
	 * system.
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public boolean isGenerateIds() {
		return this.generateIds;
	}

	/**
	 * If true then the trial subject ids will be generated automatically by the
	 * system.
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setGenerateIds(final boolean generateIds) {
		this.generateIds = generateIds;
	}
}
