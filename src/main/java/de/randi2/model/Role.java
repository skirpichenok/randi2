// Generated by delombok at Mon Aug 29 15:32:21 MSK 2016
/* 
 * (c) 2008- RANDI2 Core Development Team
 * 
 * This file is part of RANDI2.
 * 
 * RANDI2 is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 * 
 * RANDI2 is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License along with
 * RANDI2. If not, see <http://www.gnu.org/licenses/>.
 */
package de.randi2.model;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.ManyToMany;
import javax.persistence.Transient;
import org.hibernate.validator.constraints.NotEmpty;
import de.randi2.model.security.PermissionHibernate;

/**
 * The Class Role.
 */
@Entity
public class Role extends AbstractDomainObject {
	/**
	 * The Constant serialVersionUID.
	 */
	private static final long serialVersionUID = 7986310852028135642L;
	/**
	 * The Constant ROLE_INVESTIGATOR.
	 */
	public static final Role ROLE_INVESTIGATOR = new Role("ROLE_INVESTIGATOR", false, false, true, true, false, false, true, true, false, true, false, true, false, true, true, false, true, false, true, false, true, true, false, true, false, false, false, false, null);
	/**
	 * The Constant ROLE_STATISTICAN.
	 */
	public static final Role ROLE_STATISTICAN = new Role("ROLE_STATISTICAN", false, false, true, true, false, false, true, true, true, true, false, true, false, true, true, false, true, false, true, false, true, true, false, false, false, true, false, false, null);
	/**
	 * The Constant ROLE_MONITOR.
	 */
	public static final Role ROLE_MONITOR = new Role("ROLE_MONITOR", false, false, true, true, false, false, true, true, true, true, false, true, false, true, true, false, true, false, true, false, true, true, false, false, false, true, false, false, null);
	/**
	 * The Constant ROLE_ANONYMOUS.
	 */
	public static final Role ROLE_ANONYMOUS = new Role("ROLE_ANONYMOUS", false, false, true, false, false, false, false, false, false, false, true, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, null);
	/**
	 * The Constant ROLE_USER.
	 */
	public static final Role ROLE_USER = new Role("ROLE_USER", false, true, false, true, false, false, true, true, false, true, false, true, false, true, false, false, true, false, true, false, true, false, false, false, false, false, false, false, null);
	/**
	 * The Constant ROLE_P_INVESTIGATOR.
	 */
	public static final Role ROLE_P_INVESTIGATOR = new Role("ROLE_P_INVESTIGATOR", false, false, true, true, false, false, true, true, false, true, true, true, true, true, true, false, true, true, true, true, true, true, false, false, false, true, false, false, ROLE_INVESTIGATOR, ROLE_STATISTICAN, ROLE_MONITOR, ROLE_USER);
	/**
	 * The Constant ROLE_ADMIN. For productive use it is necessary to add this
	 * role to the roles to assign
	 */
	public static final Role ROLE_ADMIN = new Role("ROLE_ADMIN", true, false, true, true, true, true, true, true, false, false, true, false, true, false, true, true, false, false, false, false, false, true, false, false, false, false, false, true, ROLE_INVESTIGATOR, ROLE_MONITOR, ROLE_P_INVESTIGATOR, ROLE_STATISTICAN, ROLE_USER);
	/** The name. */
	/**
	 * Gets the name.
	 * 
	 * @return the name
	 */
	/**
	 * Sets the name.
	 *
	 * the new name
	 */
	@Column(unique = true)
	@NotEmpty
	private String name;
	// to create trial site is no scope necessary
	/** The create trial site. */
	/**
	 * Checks if is creates the trial site.
	 * 
	 * @return true, if is creates the trial site
	 */
	/**
	 * Sets the creates the trial site.
	 *
	 * the new creates the trial site
	 */
	private boolean createTrialSite = false;
	// scope for read trial site objects
	/** The scope trial site view. */
	/**
	 * Checks if is scope trial site view.
	 * 
	 * @return true, if is scope trial site view
	 */
	/**
	 * Sets the scope trial site view.
	 *
	 * the new scope trial site view
	 */
	private boolean scopeTrialSiteView = true;
	/**
	 * Checks if is read trial site.
	 * 
	 * @return true, if is read trial site
	 */
	/**
	 * Sets the read trial site.
	 *
	 * the new read trial site
	 */
	private boolean readTrialSite = true;
	// scope for write trial site objects
	/** The scope trial site write. */
	/**
	 * Checks if is scope trial site write.
	 * 
	 * @return true, if is scope trial site write
	 */
	/**
	 * Sets the scope trial site write.
	 *
	 * the new scope trial site write
	 */
	private boolean scopeTrialSiteWrite = false;
	/**
	 * Checks if is write trial site.
	 * 
	 * @return true, if is write trial site
	 */
	/**
	 * Sets the write trial site.
	 *
	 * the new write trial site
	 */
	private boolean writeTrialSite = false;
	/**
	 * Checks if is admin trial site.
	 * 
	 * @return true, if is admin trial site
	 */
	/**
	 * Sets the admin trial site.
	 *
	 * the new admin trial site
	 */
	private boolean adminTrialSite = false;
	/**
	 * The trial site permissions.
	 */
	@Transient
	private Set<PermissionHibernate> trialSitePermissions = null;
	/**
	 * Checks if is write own user.
	 * 
	 * @return true, if is write own user
	 */
	/**
	 * Sets the write own user.
	 *
	 * the new write own user
	 */
	private boolean writeOwnUser = true;
	/**
	 * Checks if is read own user.
	 * 
	 * @return true, if is read own user
	 */
	/**
	 * Sets the read own user.
	 *
	 * the new read own user
	 */
	private boolean readOwnUser = true;
	/**
	 * Checks if is admin own user.
	 * 
	 * @return true, if is admin own user
	 */
	/**
	 * Sets the admin own user.
	 *
	 * the new admin own user
	 */
	private boolean adminOwnUser = false;
	/**
	 * The own user permissions.
	 */
	@Transient
	private Set<PermissionHibernate> ownUserPermissions = null;
	// Scope for create user objects
	/** The scope user create. */
	/**
	 * Checks if is scope user create.
	 * 
	 * @return true, if is scope user create
	 */
	/**
	 * Sets the scope user create.
	 *
	 * the new scope user create
	 */
	private boolean scopeUserCreate = true;
	/**
	 * Checks if is creates the user.
	 * 
	 * @return true, if is creates the user
	 */
	/**
	 * Sets the creates the user.
	 *
	 * the new creates the user
	 */
	private boolean createUser = false;
	// scope for write user objects
	/** The scope user write. */
	/**
	 * Checks if is scope user write.
	 * 
	 * @return true, if is scope user write
	 */
	/**
	 * Sets the scope user write.
	 *
	 * the new scope user write
	 */
	private boolean scopeUserWrite = false;
	/**
	 * Checks if is write other user.
	 * 
	 * @return true, if is write other user
	 */
	/**
	 * Sets the write other user.
	 *
	 * the new write other user
	 */
	private boolean writeOtherUser = false;
	// scope for read user objects
	/** The scope user read. */
	/**
	 * Checks if is scope user read.
	 * 
	 * @return true, if is scope user read
	 */
	/**
	 * Sets the scope user read.
	 *
	 * the new scope user read
	 */
	private boolean scopeUserRead = true;
	/**
	 * Checks if is read other user.
	 * 
	 * @return true, if is read other user
	 */
	/**
	 * Sets the read other user.
	 *
	 * the new read other user
	 */
	private boolean readOtherUser = true;
	/**
	 * Checks if is admin other user.
	 * 
	 * @return true, if is admin other user
	 */
	/**
	 * Sets the admin other user.
	 *
	 * the new admin other user
	 */
	private boolean adminOtherUser = false;
	// scope for trial objects
	/** The scope trial creat. */
	/**
	 * Checks if is scope trial creat.
	 * 
	 * @return true, if is scope trial creat
	 */
	/**
	 * Sets the scope trial creat.
	 *
	 * the new scope trial creat
	 */
	private boolean scopeTrialCreate = true;
	/**
	 * Checks if is creates the trial.
	 * 
	 * @return true, if is creates the trial
	 */
	/**
	 * Sets the creates the trial.
	 *
	 * the new creates the trial
	 */
	private boolean createTrial = false;
	/**
	 * Checks if is scope trial write.
	 * 
	 * @return true, if is scope trial write
	 */
	/**
	 * Sets the scope trial write.
	 *
	 * the new scope trial write
	 */
	private boolean scopeTrialWrite = true;
	/**
	 * Checks if is write trial.
	 * 
	 * @return true, if is write trial
	 */
	/**
	 * Sets the write trial.
	 *
	 * the new write trial
	 */
	private boolean writeTrial = false;
	/**
	 * Checks if is scope trial read.
	 * 
	 * @return true, if is scope trial read
	 */
	/**
	 * Sets the scope trial read.
	 *
	 * the new scope trial read
	 */
	private boolean scopeTrialRead = true;
	/**
	 * Checks if is read trial.
	 * 
	 * @return true, if is read trial
	 */
	/**
	 * Sets the read trial.
	 *
	 * the new read trial
	 */
	private boolean readTrial = false;
	/**
	 * Checks if is admin trial.
	 * 
	 * @return true, if is admin trial
	 */
	/**
	 * Sets the admin trial.
	 *
	 * the new admin trial
	 */
	private boolean adminTrial = false;
	/**
	 * Checks if is creates the trial subject.
	 * 
	 * @return true, if is creates the trial subject
	 */
	/**
	 * Sets the creates the trial subject.
	 *
	 * the new creates the trial subject
	 */
	private boolean createTrialSubject = false;
	/**
	 * Checks if is write trial subject.
	 * 
	 * @return true, if is write trial subject
	 */
	/**
	 * Sets the write trial subject.
	 *
	 * the new write trial subject
	 */
	private boolean writeTrialSubject = false;
	/**
	 * Checks if is read trial subject.
	 * 
	 * @return true, if is read trial subject
	 */
	/**
	 * Sets the read trial subject.
	 *
	 * the new read trial subject
	 */
	private boolean readTrialSubject = false;
	/**
	 * Checks if is admin trial subject.
	 * 
	 * @return true, if is admin trial subject
	 */
	/**
	 * Sets the admin trial subject.
	 *
	 * the new admin trial subject
	 */
	private boolean adminTrialSubject = false;
	/**
	 * Checks if is creates the role.
	 * 
	 * @return true, if is creates the role
	 */
	/**
	 * Sets the creates the role.
	 *
	 * the new creates the role
	 */
	private boolean createRole = false;
	/** The roles to assign. */
	/**
	 * Gets the roles to assign.
	 * 
	 * @return the roles to assign
	 */
	/**
	 * Sets the roles to assign.
	 *
	 * the new roles to assign
	 */
	@ManyToMany
	private List<Role> rolesToAssign = new ArrayList<Role>();

	/**
	 * Instantiates a new role.
	 */
	public Role() {
	}

	/**
	 * Instantiates a new role.
	 *
	 * @param name
	 * the name
	 * @param createTrialSite
	 * the create trial site
	 * @param scopeTrialSiteView
	 * the scope trial site view
	 * @param readTrialSite
	 * the read trial site
	 * @param scopeTrialSiteWrite
	 * the scope trial site write
	 * @param writeTrialSite
	 * the write trial site
	 * @param adminTrialSite
	 * the admin trial site
	 * @param writeOwnUser
	 * the write own user
	 * @param readOwnUser
	 * the read own user
	 * @param adminOwnUser
	 * the admin own user
	 * @param scopeUserCreate
	 * the scope user create
	 * @param createUser
	 * the create user
	 * @param scopeUserWrite
	 * the scope user write
	 * @param writeOtherUser
	 * the write other user
	 * @param scopeUserRead
	 * the scope user read
	 * @param readOtherUser
	 * the read other user
	 * @param adminOtherUser
	 * the admin other user
	 * @param scopeTrialCreat
	 * the scope trial creat
	 * @param createTrial
	 * the create trial
	 * @param scopeTrialWrite
	 * the scope trial write
	 * @param writeTrial
	 * the write trial
	 * @param scopeTrialRead
	 * the scope trial read
	 * @param readTrial
	 * the read trial
	 * @param adminTrial
	 * the admin trial
	 * @param createTrialSubject
	 * the create trial subject
	 * @param writeTrialSubject
	 * the write trial subject
	 * @param readTrialSubject
	 * the read trial subject
	 * @param adminTrialSubject
	 * the admin trial subject
	 * @param createRole
	 * the create role
	 * @param rolesToAssign
	 * the roles to assign
	 */
	public Role(String name, boolean createTrialSite, boolean scopeTrialSiteView, boolean readTrialSite, boolean scopeTrialSiteWrite, boolean writeTrialSite, boolean adminTrialSite, boolean writeOwnUser, boolean readOwnUser, boolean adminOwnUser, boolean scopeUserCreate, boolean createUser, boolean scopeUserWrite, boolean writeOtherUser, boolean scopeUserRead, boolean readOtherUser, boolean adminOtherUser, boolean scopeTrialCreate, boolean createTrial, boolean scopeTrialWrite, boolean writeTrial, boolean scopeTrialRead, boolean readTrial, boolean adminTrial, boolean createTrialSubject, boolean writeTrialSubject, boolean readTrialSubject, boolean adminTrialSubject, boolean createRole, Role... rolesToAssign) {
		this.name = name;
		this.createTrialSite = createTrialSite;
		this.scopeTrialSiteView = scopeTrialSiteView;
		this.readTrialSite = readTrialSite;
		this.scopeTrialSiteWrite = scopeTrialSiteWrite;
		this.writeTrialSite = writeTrialSite;
		this.adminTrialSite = adminTrialSite;
		this.writeOwnUser = writeOwnUser;
		this.readOwnUser = readOwnUser;
		this.adminOwnUser = adminOwnUser;
		this.scopeUserCreate = scopeUserCreate;
		this.createUser = createUser;
		this.scopeUserWrite = scopeUserWrite;
		this.writeOtherUser = writeOtherUser;
		this.scopeUserRead = scopeUserRead;
		this.readOtherUser = readOtherUser;
		this.adminOtherUser = adminOtherUser;
		this.scopeTrialCreate = scopeTrialCreate;
		this.createTrial = createTrial;
		this.scopeTrialWrite = scopeTrialWrite;
		this.writeTrial = writeTrial;
		this.scopeTrialRead = scopeTrialRead;
		this.readTrial = readTrial;
		this.adminTrial = adminTrial;
		this.createTrialSubject = createTrialSubject;
		this.writeTrialSubject = writeTrialSubject;
		this.readTrialSubject = readTrialSubject;
		this.adminTrialSubject = adminTrialSubject;
		this.createRole = createRole;
		if (rolesToAssign == null) {
			this.rolesToAssign = new ArrayList<Role>();
		} else {
			this.rolesToAssign = new ArrayList<Role>(Arrays.asList(rolesToAssign));
		}
	}

	/**
	 * Get trial site permissions.
	 *
	 * @return the trialSitePermissions
	 */
	public Set<PermissionHibernate> getTrialSitePermissions() {
		if (trialSitePermissions == null) {
			trialSitePermissions = new HashSet<PermissionHibernate>();
			if (writeTrialSite) {
				trialSitePermissions.add(PermissionHibernate.WRITE);
			}
			if (readTrialSite) {
				trialSitePermissions.add(PermissionHibernate.READ);
			}
			if (adminTrialSite) {
				trialSitePermissions.add(PermissionHibernate.ADMINISTRATION);
			}
		}
		return trialSitePermissions;
	}

	/**
	 * Get own user permissions.
	 *
	 * @return the ownUserPermissions
	 */
	public Set<PermissionHibernate> getOwnUserPermissions() {
		if (ownUserPermissions == null) {
			ownUserPermissions = new HashSet<PermissionHibernate>();
			if (writeOwnUser) {
				ownUserPermissions.add(PermissionHibernate.WRITE);
			}
			if (readOwnUser) {
				ownUserPermissions.add(PermissionHibernate.READ);
			}
			if (adminOwnUser) {
				ownUserPermissions.add(PermissionHibernate.ADMINISTRATION);
			}
		}
		return ownUserPermissions;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see de.randi2.model.AbstractDomainObject#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object o) {
		if (o == null) return false;
		if (o.getClass().isInstance(this)) {
			return ((Role) o).getName().equals(this.getName());
		}
		return false;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see de.randi2.model.AbstractDomainObject#hashCode()
	 */
	@Override
	public int hashCode() {
		return name.hashCode();
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see de.randi2.model.AbstractDomainObject#getUIName()
	 */
	@Override
	public String getUIName() {
		return name;
	}

	/**
	 * Sets the name.
	 *
	 * the new name
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public String getName() {
		return this.name;
	}

	/**
	 * Sets the name.
	 *
	 * @param name
	 * the new name
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setName(final String name) {
		this.name = name;
	}

	/**
	 * Sets the creates the trial site.
	 *
	 * the new creates the trial site
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public boolean isCreateTrialSite() {
		return this.createTrialSite;
	}

	/**
	 * Sets the creates the trial site.
	 *
	 * @param createTrialSite
	 * the new creates the trial site
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setCreateTrialSite(final boolean createTrialSite) {
		this.createTrialSite = createTrialSite;
	}

	/**
	 * Sets the scope trial site view.
	 *
	 * the new scope trial site view
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public boolean isScopeTrialSiteView() {
		return this.scopeTrialSiteView;
	}

	/**
	 * Sets the scope trial site view.
	 *
	 * @param scopeTrialSiteView
	 * the new scope trial site view
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setScopeTrialSiteView(final boolean scopeTrialSiteView) {
		this.scopeTrialSiteView = scopeTrialSiteView;
	}

	/**
	 * Sets the read trial site.
	 *
	 * the new read trial site
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public boolean isReadTrialSite() {
		return this.readTrialSite;
	}

	/**
	 * Sets the read trial site.
	 *
	 * @param readTrialSite
	 * the new read trial site
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setReadTrialSite(final boolean readTrialSite) {
		this.readTrialSite = readTrialSite;
	}

	/**
	 * Sets the scope trial site write.
	 *
	 * the new scope trial site write
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public boolean isScopeTrialSiteWrite() {
		return this.scopeTrialSiteWrite;
	}

	/**
	 * Sets the scope trial site write.
	 *
	 * @param scopeTrialSiteWrite
	 * the new scope trial site write
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setScopeTrialSiteWrite(final boolean scopeTrialSiteWrite) {
		this.scopeTrialSiteWrite = scopeTrialSiteWrite;
	}

	/**
	 * Sets the write trial site.
	 *
	 * the new write trial site
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public boolean isWriteTrialSite() {
		return this.writeTrialSite;
	}

	/**
	 * Sets the write trial site.
	 *
	 * @param writeTrialSite
	 * the new write trial site
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setWriteTrialSite(final boolean writeTrialSite) {
		this.writeTrialSite = writeTrialSite;
	}

	/**
	 * Sets the admin trial site.
	 *
	 * the new admin trial site
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public boolean isAdminTrialSite() {
		return this.adminTrialSite;
	}

	/**
	 * Sets the admin trial site.
	 *
	 * @param adminTrialSite
	 * the new admin trial site
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setAdminTrialSite(final boolean adminTrialSite) {
		this.adminTrialSite = adminTrialSite;
	}

	/**
	 * Sets the write own user.
	 *
	 * the new write own user
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public boolean isWriteOwnUser() {
		return this.writeOwnUser;
	}

	/**
	 * Sets the write own user.
	 *
	 * @param writeOwnUser
	 * the new write own user
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setWriteOwnUser(final boolean writeOwnUser) {
		this.writeOwnUser = writeOwnUser;
	}

	/**
	 * Sets the read own user.
	 *
	 * the new read own user
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public boolean isReadOwnUser() {
		return this.readOwnUser;
	}

	/**
	 * Sets the read own user.
	 *
	 * @param readOwnUser
	 * the new read own user
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setReadOwnUser(final boolean readOwnUser) {
		this.readOwnUser = readOwnUser;
	}

	/**
	 * Sets the admin own user.
	 *
	 * the new admin own user
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public boolean isAdminOwnUser() {
		return this.adminOwnUser;
	}

	/**
	 * Sets the admin own user.
	 *
	 * @param adminOwnUser
	 * the new admin own user
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setAdminOwnUser(final boolean adminOwnUser) {
		this.adminOwnUser = adminOwnUser;
	}

	/**
	 * Sets the scope user create.
	 *
	 * the new scope user create
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public boolean isScopeUserCreate() {
		return this.scopeUserCreate;
	}

	/**
	 * Sets the scope user create.
	 *
	 * @param scopeUserCreate
	 * the new scope user create
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setScopeUserCreate(final boolean scopeUserCreate) {
		this.scopeUserCreate = scopeUserCreate;
	}

	/**
	 * Sets the creates the user.
	 *
	 * the new creates the user
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public boolean isCreateUser() {
		return this.createUser;
	}

	/**
	 * Sets the creates the user.
	 *
	 * @param createUser
	 * the new creates the user
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setCreateUser(final boolean createUser) {
		this.createUser = createUser;
	}

	/**
	 * Sets the scope user write.
	 *
	 * the new scope user write
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public boolean isScopeUserWrite() {
		return this.scopeUserWrite;
	}

	/**
	 * Sets the scope user write.
	 *
	 * @param scopeUserWrite
	 * the new scope user write
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setScopeUserWrite(final boolean scopeUserWrite) {
		this.scopeUserWrite = scopeUserWrite;
	}

	/**
	 * Sets the write other user.
	 *
	 * the new write other user
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public boolean isWriteOtherUser() {
		return this.writeOtherUser;
	}

	/**
	 * Sets the write other user.
	 *
	 * @param writeOtherUser
	 * the new write other user
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setWriteOtherUser(final boolean writeOtherUser) {
		this.writeOtherUser = writeOtherUser;
	}

	/**
	 * Sets the scope user read.
	 *
	 * the new scope user read
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public boolean isScopeUserRead() {
		return this.scopeUserRead;
	}

	/**
	 * Sets the scope user read.
	 *
	 * @param scopeUserRead
	 * the new scope user read
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setScopeUserRead(final boolean scopeUserRead) {
		this.scopeUserRead = scopeUserRead;
	}

	/**
	 * Sets the read other user.
	 *
	 * the new read other user
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public boolean isReadOtherUser() {
		return this.readOtherUser;
	}

	/**
	 * Sets the read other user.
	 *
	 * @param readOtherUser
	 * the new read other user
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setReadOtherUser(final boolean readOtherUser) {
		this.readOtherUser = readOtherUser;
	}

	/**
	 * Sets the admin other user.
	 *
	 * the new admin other user
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public boolean isAdminOtherUser() {
		return this.adminOtherUser;
	}

	/**
	 * Sets the admin other user.
	 *
	 * @param adminOtherUser
	 * the new admin other user
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setAdminOtherUser(final boolean adminOtherUser) {
		this.adminOtherUser = adminOtherUser;
	}

	/**
	 * Sets the scope trial creat.
	 *
	 * the new scope trial creat
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public boolean isScopeTrialCreate() {
		return this.scopeTrialCreate;
	}

	/**
	 * Sets the scope trial creat.
	 *
	 * @param scopeTrialCreat
	 * the new scope trial creat
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setScopeTrialCreate(final boolean scopeTrialCreate) {
		this.scopeTrialCreate = scopeTrialCreate;
	}

	/**
	 * Sets the creates the trial.
	 *
	 * the new creates the trial
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public boolean isCreateTrial() {
		return this.createTrial;
	}

	/**
	 * Sets the creates the trial.
	 *
	 * @param createTrial
	 * the new creates the trial
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setCreateTrial(final boolean createTrial) {
		this.createTrial = createTrial;
	}

	/**
	 * Sets the scope trial write.
	 *
	 * the new scope trial write
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public boolean isScopeTrialWrite() {
		return this.scopeTrialWrite;
	}

	/**
	 * Sets the scope trial write.
	 *
	 * @param scopeTrialWrite
	 * the new scope trial write
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setScopeTrialWrite(final boolean scopeTrialWrite) {
		this.scopeTrialWrite = scopeTrialWrite;
	}

	/**
	 * Sets the write trial.
	 *
	 * the new write trial
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public boolean isWriteTrial() {
		return this.writeTrial;
	}

	/**
	 * Sets the write trial.
	 *
	 * @param writeTrial
	 * the new write trial
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setWriteTrial(final boolean writeTrial) {
		this.writeTrial = writeTrial;
	}

	/**
	 * Sets the scope trial read.
	 *
	 * the new scope trial read
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public boolean isScopeTrialRead() {
		return this.scopeTrialRead;
	}

	/**
	 * Sets the scope trial read.
	 *
	 * @param scopeTrialRead
	 * the new scope trial read
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setScopeTrialRead(final boolean scopeTrialRead) {
		this.scopeTrialRead = scopeTrialRead;
	}

	/**
	 * Sets the read trial.
	 *
	 * the new read trial
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public boolean isReadTrial() {
		return this.readTrial;
	}

	/**
	 * Sets the read trial.
	 *
	 * @param readTrial
	 * the new read trial
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setReadTrial(final boolean readTrial) {
		this.readTrial = readTrial;
	}

	/**
	 * Sets the admin trial.
	 *
	 * the new admin trial
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public boolean isAdminTrial() {
		return this.adminTrial;
	}

	/**
	 * Sets the admin trial.
	 *
	 * @param adminTrial
	 * the new admin trial
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setAdminTrial(final boolean adminTrial) {
		this.adminTrial = adminTrial;
	}

	/**
	 * Sets the creates the trial subject.
	 *
	 * the new creates the trial subject
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public boolean isCreateTrialSubject() {
		return this.createTrialSubject;
	}

	/**
	 * Sets the creates the trial subject.
	 *
	 * @param createTrialSubject
	 * the new creates the trial subject
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setCreateTrialSubject(final boolean createTrialSubject) {
		this.createTrialSubject = createTrialSubject;
	}

	/**
	 * Sets the write trial subject.
	 *
	 * the new write trial subject
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public boolean isWriteTrialSubject() {
		return this.writeTrialSubject;
	}

	/**
	 * Sets the write trial subject.
	 *
	 * @param writeTrialSubject
	 * the new write trial subject
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setWriteTrialSubject(final boolean writeTrialSubject) {
		this.writeTrialSubject = writeTrialSubject;
	}

	/**
	 * Sets the read trial subject.
	 *
	 * the new read trial subject
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public boolean isReadTrialSubject() {
		return this.readTrialSubject;
	}

	/**
	 * Sets the read trial subject.
	 *
	 * @param readTrialSubject
	 * the new read trial subject
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setReadTrialSubject(final boolean readTrialSubject) {
		this.readTrialSubject = readTrialSubject;
	}

	/**
	 * Sets the admin trial subject.
	 *
	 * the new admin trial subject
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public boolean isAdminTrialSubject() {
		return this.adminTrialSubject;
	}

	/**
	 * Sets the admin trial subject.
	 *
	 * @param adminTrialSubject
	 * the new admin trial subject
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setAdminTrialSubject(final boolean adminTrialSubject) {
		this.adminTrialSubject = adminTrialSubject;
	}

	/**
	 * Sets the creates the role.
	 *
	 * the new creates the role
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public boolean isCreateRole() {
		return this.createRole;
	}

	/**
	 * Sets the creates the role.
	 *
	 * @param createRole
	 * the new creates the role
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setCreateRole(final boolean createRole) {
		this.createRole = createRole;
	}

	/**
	 * Sets the roles to assign.
	 *
	 * the new roles to assign
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public List<Role> getRolesToAssign() {
		return this.rolesToAssign;
	}

	/**
	 * Sets the roles to assign.
	 *
	 * @param rolesToAssign
	 * the new roles to assign
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setRolesToAssign(final List<Role> rolesToAssign) {
		this.rolesToAssign = rolesToAssign;
	}
}
