// Generated by delombok at Mon Aug 29 15:32:21 MSK 2016
/* 
 * (c) 2008- RANDI2 Core Development Team
 * 
 * This file is part of RANDI2.
 * 
 * RANDI2 is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 * 
 * RANDI2 is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License along with
 * RANDI2. If not, see <http://www.gnu.org/licenses/>.
 */
package de.randi2.model;

import java.io.Serializable;
import javax.persistence.Entity;
import javax.persistence.Lob;
import javax.persistence.ManyToOne;
import javax.persistence.Transient;
import org.hibernate.annotations.Target;
import de.randi2.model.criteria.AbstractCriterion;
import de.randi2.model.criteria.constraints.AbstractConstraint;
import de.randi2.unsorted.ConstraintViolatedException;

/**
 * The Class SubjectProperty.
 */
@Entity
public final class SubjectProperty<V extends Serializable> extends AbstractDomainObject {
	/**
	 * The Constant serialVersionUID.
	 */
	private static final long serialVersionUID = 6795792982229806832L;
	/**
	 * The value.
	 */
	@Target(Serializable.class)
	@Lob
	private V value;
	/**
	 * The criterion.
	 */
	@ManyToOne(targetEntity = AbstractCriterion.class)
	private AbstractCriterion<V, ? extends AbstractConstraint<V>> criterion;

	/**
	 * Instantiates a new subject property.
	 *
	 * @param _criterion
	 * the _criterion
	 */
	@SuppressWarnings("unchecked")
	public SubjectProperty(AbstractCriterion _criterion) {
		this.criterion = _criterion;
	}

	//only for or-mapping
	/**
	 * Instantiates a new subject property.
	 */
	@SuppressWarnings("unused")
	private SubjectProperty() {
	}

	/**
	 * Gets the stratum.
	 *
	 * @return the stratum
	 *
	 * @throws ConstraintViolatedException
	 * the contraint violated exception
	 */
	@Transient
	public long getStratum() throws ConstraintViolatedException {
		AbstractConstraint<?> constraint = criterion.stratify(value);
		if (constraint == null) return -1;
		 else return constraint.getId();
	}

	// Get- and Set Methods
	/**
	 * Gets the value.
	 *
	 * @return the value
	 */
	@Transient
	public V getValue() {
		return value;
	}

	/**
	 * Sets the value.
	 *
	 * @param value
	 * the new value
	 *
	 * @throws ConstraintViolatedException
	 * the contraint violated exception
	 */
	public void setValue(V value) throws ConstraintViolatedException {
		criterion.isValueCorrect(value);
		this.value = value;
	}

	/**
	 * Get criterion.
	 *
	 * @return the criterion
	 */
	@Transient
	public AbstractCriterion<V, ? extends AbstractConstraint<V>> getCriterion() {
		return criterion;
	}

	/**
	 * Set criterion (Hibernate only).
	 *
	 * @param criterion
	 * the criterion
	 */
	protected void setCriterion(AbstractCriterion<V, ? extends AbstractConstraint<V>> criterion) {
		this.criterion = criterion;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public boolean equals(final java.lang.Object o) {
		if (o == this) return true;
		if (!(o instanceof SubjectProperty)) return false;
		final SubjectProperty<?> other = (SubjectProperty<?>) o;
		if (!other.canEqual((java.lang.Object) this)) return false;
		if (!super.equals(o)) return false;
		final java.lang.Object this$value = this.getValue();
		final java.lang.Object other$value = other.getValue();
		if (this$value == null ? other$value != null : !this$value.equals(other$value)) return false;
		final java.lang.Object this$criterion = this.getCriterion();
		final java.lang.Object other$criterion = other.getCriterion();
		if (this$criterion == null ? other$criterion != null : !this$criterion.equals(other$criterion)) return false;
		return true;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	protected boolean canEqual(final java.lang.Object other) {
		return other instanceof SubjectProperty;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public int hashCode() {
		final int PRIME = 59;
		int result = 1;
		result = result * PRIME + super.hashCode();
		final java.lang.Object $value = this.getValue();
		result = result * PRIME + ($value == null ? 43 : $value.hashCode());
		final java.lang.Object $criterion = this.getCriterion();
		result = result * PRIME + ($criterion == null ? 43 : $criterion.hashCode());
		return result;
	}
}
