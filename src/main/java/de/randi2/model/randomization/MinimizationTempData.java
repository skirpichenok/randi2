// Generated by delombok at Mon Aug 29 15:32:21 MSK 2016
package de.randi2.model.randomization;

import java.util.Map;
import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.OneToMany;
import de.randi2.model.TreatmentArm;
import de.randi2.model.TrialSite;
import de.randi2.model.criteria.constraints.AbstractConstraint;

@Entity
public class MinimizationTempData extends AbstractRandomizationTempData {
	private static final long serialVersionUID = -69397485726955392L;
	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.EAGER)
	@JoinTable(name = "MinimizationTempData_Probabilities", joinColumns = @JoinColumn(name = "treatmentArm_id"), inverseJoinColumns = @JoinColumn(name = "minimizationMapElementWrapper_id"))
	private Map<TreatmentArm, MinimizationMapElementWrapper> probabilitiesPerPreferredTreatment;
	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.EAGER)
	@JoinTable(name = "MinimizationTempData_CountConstraints", joinColumns = @JoinColumn(name = "constraints_id"), inverseJoinColumns = @JoinColumn(name = "minimizationMapElementWrapper_id"))
	private Map<AbstractConstraint<?>, MinimizationMapElementWrapper> countConstraints;
	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.EAGER)
	@JoinTable(name = "MinimizationTempData_countTrialSites", joinColumns = @JoinColumn(name = "trialSite_id"), inverseJoinColumns = @JoinColumn(name = "minimizationMapElementWrapper_id"))
	private Map<TrialSite, MinimizationMapElementWrapper> countTrialSites;

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public MinimizationTempData() {
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public Map<TreatmentArm, MinimizationMapElementWrapper> getProbabilitiesPerPreferredTreatment() {
		return this.probabilitiesPerPreferredTreatment;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public Map<AbstractConstraint<?>, MinimizationMapElementWrapper> getCountConstraints() {
		return this.countConstraints;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public Map<TrialSite, MinimizationMapElementWrapper> getCountTrialSites() {
		return this.countTrialSites;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setProbabilitiesPerPreferredTreatment(final Map<TreatmentArm, MinimizationMapElementWrapper> probabilitiesPerPreferredTreatment) {
		this.probabilitiesPerPreferredTreatment = probabilitiesPerPreferredTreatment;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setCountConstraints(final Map<AbstractConstraint<?>, MinimizationMapElementWrapper> countConstraints) {
		this.countConstraints = countConstraints;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setCountTrialSites(final Map<TrialSite, MinimizationMapElementWrapper> countTrialSites) {
		this.countTrialSites = countTrialSites;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public java.lang.String toString() {
		return "MinimizationTempData(probabilitiesPerPreferredTreatment=" + this.getProbabilitiesPerPreferredTreatment() + ", countConstraints=" + this.getCountConstraints() + ", countTrialSites=" + this.getCountTrialSites() + ")";
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public boolean equals(final java.lang.Object o) {
		if (o == this) return true;
		if (!(o instanceof MinimizationTempData)) return false;
		final MinimizationTempData other = (MinimizationTempData) o;
		if (!other.canEqual((java.lang.Object) this)) return false;
		if (!super.equals(o)) return false;
		final java.lang.Object this$probabilitiesPerPreferredTreatment = this.getProbabilitiesPerPreferredTreatment();
		final java.lang.Object other$probabilitiesPerPreferredTreatment = other.getProbabilitiesPerPreferredTreatment();
		if (this$probabilitiesPerPreferredTreatment == null ? other$probabilitiesPerPreferredTreatment != null : !this$probabilitiesPerPreferredTreatment.equals(other$probabilitiesPerPreferredTreatment)) return false;
		final java.lang.Object this$countConstraints = this.getCountConstraints();
		final java.lang.Object other$countConstraints = other.getCountConstraints();
		if (this$countConstraints == null ? other$countConstraints != null : !this$countConstraints.equals(other$countConstraints)) return false;
		final java.lang.Object this$countTrialSites = this.getCountTrialSites();
		final java.lang.Object other$countTrialSites = other.getCountTrialSites();
		if (this$countTrialSites == null ? other$countTrialSites != null : !this$countTrialSites.equals(other$countTrialSites)) return false;
		return true;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	protected boolean canEqual(final java.lang.Object other) {
		return other instanceof MinimizationTempData;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public int hashCode() {
		final int PRIME = 59;
		int result = 1;
		result = result * PRIME + super.hashCode();
		final java.lang.Object $probabilitiesPerPreferredTreatment = this.getProbabilitiesPerPreferredTreatment();
		result = result * PRIME + ($probabilitiesPerPreferredTreatment == null ? 43 : $probabilitiesPerPreferredTreatment.hashCode());
		final java.lang.Object $countConstraints = this.getCountConstraints();
		result = result * PRIME + ($countConstraints == null ? 43 : $countConstraints.hashCode());
		final java.lang.Object $countTrialSites = this.getCountTrialSites();
		result = result * PRIME + ($countTrialSites == null ? 43 : $countTrialSites.hashCode());
		return result;
	}
}
