// Generated by delombok at Mon Aug 29 15:32:21 MSK 2016
/* 
 * (c) 2008- RANDI2 Core Development Team
 * 
 * This file is part of RANDI2.
 * 
 * RANDI2 is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 * 
 * RANDI2 is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License along with
 * RANDI2. If not, see <http://www.gnu.org/licenses/>.
 */
package de.randi2.model.randomization;

import javax.persistence.Entity;
import de.randi2.randomization.RandomizationAlgorithm;
import de.randi2.randomization.ResponseAdaptiveRandomization;
import de.randi2.utility.validations.randomizationConfiguration.ResponseAdaptiveRandomizationConfigA;

/**
 * @author Natalie Waskowzow
 */
@Entity
@ResponseAdaptiveRandomizationConfigA
public class ResponseAdaptiveRConfig extends AbstractRandomizationConfig {
	/**
	 * generated serial version id
	 */
	private static final long serialVersionUID = -6445531786408124628L;
	private int initializeCountBallsResponseAdaptiveR;
	private int countBallsResponseSuccess;
	private int countBallsResponseFailure;

	public ResponseAdaptiveRConfig(Long seed) {
		super(seed);
	}

	public ResponseAdaptiveRConfig() {
		super(null);
	}

	/**
	 * @see de.randi2.model.randomization.AbstractRandomizationConfig#createAlgorithm()
	 */
	@Override
	public RandomizationAlgorithm<? extends AbstractRandomizationConfig> createAlgorithm() {
		return new ResponseAdaptiveRandomization(super.getTrial());
	}

	/**
	 * @see de.randi2.model.randomization.AbstractRandomizationConfig#createAlgorithm(long)
	 */
	@Override
	public RandomizationAlgorithm<? extends AbstractRandomizationConfig> createAlgorithm(long seed) {
		return new ResponseAdaptiveRandomization(super.getTrial(), seed);
	}

	@Override
	public AbstractRandomizationTempData getTempData() {
		if (tempData == null) {
			tempData = new ResponseAdaptiveRandomizationTempData();
		}
		return tempData;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public int getInitializeCountBallsResponseAdaptiveR() {
		return this.initializeCountBallsResponseAdaptiveR;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public int getCountBallsResponseSuccess() {
		return this.countBallsResponseSuccess;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public int getCountBallsResponseFailure() {
		return this.countBallsResponseFailure;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setInitializeCountBallsResponseAdaptiveR(final int initializeCountBallsResponseAdaptiveR) {
		this.initializeCountBallsResponseAdaptiveR = initializeCountBallsResponseAdaptiveR;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setCountBallsResponseSuccess(final int countBallsResponseSuccess) {
		this.countBallsResponseSuccess = countBallsResponseSuccess;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setCountBallsResponseFailure(final int countBallsResponseFailure) {
		this.countBallsResponseFailure = countBallsResponseFailure;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public java.lang.String toString() {
		return "ResponseAdaptiveRConfig(initializeCountBallsResponseAdaptiveR=" + this.getInitializeCountBallsResponseAdaptiveR() + ", countBallsResponseSuccess=" + this.getCountBallsResponseSuccess() + ", countBallsResponseFailure=" + this.getCountBallsResponseFailure() + ")";
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public boolean equals(final java.lang.Object o) {
		if (o == this) return true;
		if (!(o instanceof ResponseAdaptiveRConfig)) return false;
		final ResponseAdaptiveRConfig other = (ResponseAdaptiveRConfig) o;
		if (!other.canEqual((java.lang.Object) this)) return false;
		if (!super.equals(o)) return false;
		if (this.getInitializeCountBallsResponseAdaptiveR() != other.getInitializeCountBallsResponseAdaptiveR()) return false;
		if (this.getCountBallsResponseSuccess() != other.getCountBallsResponseSuccess()) return false;
		if (this.getCountBallsResponseFailure() != other.getCountBallsResponseFailure()) return false;
		return true;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	protected boolean canEqual(final java.lang.Object other) {
		return other instanceof ResponseAdaptiveRConfig;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public int hashCode() {
		final int PRIME = 59;
		int result = 1;
		result = result * PRIME + super.hashCode();
		result = result * PRIME + this.getInitializeCountBallsResponseAdaptiveR();
		result = result * PRIME + this.getCountBallsResponseSuccess();
		result = result * PRIME + this.getCountBallsResponseFailure();
		return result;
	}
}
