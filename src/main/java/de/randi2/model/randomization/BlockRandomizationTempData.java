// Generated by delombok at Mon Aug 29 15:32:21 MSK 2016
/* 
 * (c) 2008- RANDI2 Core Development Team
 * 
 * This file is part of RANDI2.
 * 
 * RANDI2 is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 * 
 * RANDI2 is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License along with
 * RANDI2. If not, see <http://www.gnu.org/licenses/>.
 */
package de.randi2.model.randomization;

import java.util.HashMap;
import java.util.Map;
import javax.persistence.DiscriminatorValue;
import javax.persistence.Entity;
import javax.persistence.MapKeyColumn;
import javax.persistence.OneToMany;

@Entity
@DiscriminatorValue("BLOCK")
public class BlockRandomizationTempData extends AbstractRandomizationTempData {
	private static final long serialVersionUID = -5150967612749185875L;
	// @CollectionOfElements(targetElement = Block.class, fetch=FetchType.EAGER)
	// @MapKey(targetElement = String.class, columns =
	// {@Column(name="mapkey",nullable=false)})
	@OneToMany
	@MapKeyColumn
	private Map<String, Block> blocks = new HashMap<String, Block>();

	public Block getBlock(String stratum) {
		return blocks.get(stratum);
	}

	public void setBlock(String stratum, Block currentBlock) {
		blocks.put(stratum, currentBlock);
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public BlockRandomizationTempData() {
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public Map<String, Block> getBlocks() {
		return this.blocks;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setBlocks(final Map<String, Block> blocks) {
		this.blocks = blocks;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public java.lang.String toString() {
		return "BlockRandomizationTempData(blocks=" + this.getBlocks() + ")";
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public boolean equals(final java.lang.Object o) {
		if (o == this) return true;
		if (!(o instanceof BlockRandomizationTempData)) return false;
		final BlockRandomizationTempData other = (BlockRandomizationTempData) o;
		if (!other.canEqual((java.lang.Object) this)) return false;
		if (!super.equals(o)) return false;
		final java.lang.Object this$blocks = this.getBlocks();
		final java.lang.Object other$blocks = other.getBlocks();
		if (this$blocks == null ? other$blocks != null : !this$blocks.equals(other$blocks)) return false;
		return true;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	protected boolean canEqual(final java.lang.Object other) {
		return other instanceof BlockRandomizationTempData;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public int hashCode() {
		final int PRIME = 59;
		int result = 1;
		result = result * PRIME + super.hashCode();
		final java.lang.Object $blocks = this.getBlocks();
		result = result * PRIME + ($blocks == null ? 43 : $blocks.hashCode());
		return result;
	}
}
