// Generated by delombok at Mon Aug 29 15:32:21 MSK 2016
/* 
 * (c) 2008- RANDI2 Core Development Team
 * 
 * This file is part of RANDI2.
 * 
 * RANDI2 is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 * 
 * RANDI2 is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License along with
 * RANDI2. If not, see <http://www.gnu.org/licenses/>.
 */
package de.randi2.model.randomization;

import static de.randi2.utility.IntegerIterator.upto;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.Set;
import javax.persistence.Entity;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import de.randi2.model.AbstractDomainObject;
import de.randi2.model.TreatmentArm;

/**
 * @author Natalie Waskowzow
 */
@Entity
public class ResponseAdaptiveUrn extends AbstractDomainObject {
	private static final long serialVersionUID = -2472302592410115052L;
	@ManyToMany
	@JoinTable(name = "ResponseAdaptiveUrn_Treatmentarm", joinColumns = {@JoinColumn(name = "ResponseAdaptiveUrn_id")}, inverseJoinColumns = {@JoinColumn(name = "Treatmentarm_id")})
	private List<TreatmentArm> responseAdaptiveUrn = new ArrayList<TreatmentArm>();

	public static ResponseAdaptiveUrn generate(ResponseAdaptiveRConfig config) {
		ResponseAdaptiveUrn responseAdaptiveUrn = new ResponseAdaptiveUrn();
		Set<TreatmentArm> arms = config.getTrial().getTreatmentArms();
		int initializeCount = config.getInitializeCountBallsResponseAdaptiveR();
		if (initializeCount != 0) {
			for (int i : upto(initializeCount)) {
				for (TreatmentArm arm : arms) {
					responseAdaptiveUrn.add(arm);
				}
			}
		}
		return responseAdaptiveUrn;
	}

	public void add(TreatmentArm arm) {
		responseAdaptiveUrn.add(arm);
	}

	public TreatmentArm drawFromUrn(ResponseAdaptiveRConfig config, Random rand) {
		if (responseAdaptiveUrn.size() != 0) {
			return responseAdaptiveUrn.get(rand.nextInt(responseAdaptiveUrn.size()));
		} else {
			TreatmentArm drawnArm = new TreatmentArm();
			double randomNumber = rand.nextDouble();
			Set<TreatmentArm> arms = config.getTrial().getTreatmentArms();
			int i = 0;
			for (TreatmentArm arm : arms) {
				i++;
				if ((randomNumber < (i / arms.size())) && (randomNumber >= (i - 1) / arms.size())) {
					drawnArm = arm;
					break;
				}
			}
			return drawnArm;
		}
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public ResponseAdaptiveUrn() {
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public List<TreatmentArm> getResponseAdaptiveUrn() {
		return this.responseAdaptiveUrn;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setResponseAdaptiveUrn(final List<TreatmentArm> responseAdaptiveUrn) {
		this.responseAdaptiveUrn = responseAdaptiveUrn;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public java.lang.String toString() {
		return "ResponseAdaptiveUrn(responseAdaptiveUrn=" + this.getResponseAdaptiveUrn() + ")";
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public boolean equals(final java.lang.Object o) {
		if (o == this) return true;
		if (!(o instanceof ResponseAdaptiveUrn)) return false;
		final ResponseAdaptiveUrn other = (ResponseAdaptiveUrn) o;
		if (!other.canEqual((java.lang.Object) this)) return false;
		if (!super.equals(o)) return false;
		final java.lang.Object this$responseAdaptiveUrn = this.getResponseAdaptiveUrn();
		final java.lang.Object other$responseAdaptiveUrn = other.getResponseAdaptiveUrn();
		if (this$responseAdaptiveUrn == null ? other$responseAdaptiveUrn != null : !this$responseAdaptiveUrn.equals(other$responseAdaptiveUrn)) return false;
		return true;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	protected boolean canEqual(final java.lang.Object other) {
		return other instanceof ResponseAdaptiveUrn;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public int hashCode() {
		final int PRIME = 59;
		int result = 1;
		result = result * PRIME + super.hashCode();
		final java.lang.Object $responseAdaptiveUrn = this.getResponseAdaptiveUrn();
		result = result * PRIME + ($responseAdaptiveUrn == null ? 43 : $responseAdaptiveUrn.hashCode());
		return result;
	}
}
