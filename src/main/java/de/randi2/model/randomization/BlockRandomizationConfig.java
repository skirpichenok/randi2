// Generated by delombok at Mon Aug 29 15:32:21 MSK 2016
/* 
 * (c) 2008- RANDI2 Core Development Team
 * 
 * This file is part of RANDI2.
 * 
 * RANDI2 is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 * 
 * RANDI2 is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License along with
 * RANDI2. If not, see <http://www.gnu.org/licenses/>.
 */
package de.randi2.model.randomization;

import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.Transient;
import de.randi2.randomization.BlockRandomization;
import de.randi2.randomization.RandomizationAlgorithm;
import de.randi2.utility.validations.randomizationConfiguration.BlockRandomizationConfigA;

@Entity
@BlockRandomizationConfigA
public class BlockRandomizationConfig extends AbstractRandomizationConfig {
	private static final long serialVersionUID = -7933864896327057988L;


	public enum TYPE {
		MULTIPLY, ABSOLUTE;
	}

	private int minimum;
	private int maximum;
	@Enumerated(EnumType.STRING)
	private TYPE type;

	public BlockRandomizationConfig(long seed) {
		super(seed);
	}

	public BlockRandomizationConfig() {
		super(null);
	}

	@Override
	public RandomizationAlgorithm<BlockRandomizationConfig> createAlgorithm() {
		return new BlockRandomization(super.getTrial());
	}

	@Override
	public RandomizationAlgorithm<? extends AbstractRandomizationConfig> createAlgorithm(long seed) {
		return new BlockRandomization(super.getTrial(), seed);
	}

	@Override
	public AbstractRandomizationTempData getTempData() {
		if (tempData == null) {
			tempData = new BlockRandomizationTempData();
		}
		return tempData;
	}

	@Transient
	public boolean isVariableBlockSize() {
		return maximum != minimum;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public int getMinimum() {
		return this.minimum;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public int getMaximum() {
		return this.maximum;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public TYPE getType() {
		return this.type;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setMinimum(final int minimum) {
		this.minimum = minimum;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setMaximum(final int maximum) {
		this.maximum = maximum;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setType(final TYPE type) {
		this.type = type;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public java.lang.String toString() {
		return "BlockRandomizationConfig(minimum=" + this.getMinimum() + ", maximum=" + this.getMaximum() + ", type=" + this.getType() + ")";
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public boolean equals(final java.lang.Object o) {
		if (o == this) return true;
		if (!(o instanceof BlockRandomizationConfig)) return false;
		final BlockRandomizationConfig other = (BlockRandomizationConfig) o;
		if (!other.canEqual((java.lang.Object) this)) return false;
		if (!super.equals(o)) return false;
		if (this.getMinimum() != other.getMinimum()) return false;
		if (this.getMaximum() != other.getMaximum()) return false;
		final java.lang.Object this$type = this.getType();
		final java.lang.Object other$type = other.getType();
		if (this$type == null ? other$type != null : !this$type.equals(other$type)) return false;
		return true;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	protected boolean canEqual(final java.lang.Object other) {
		return other instanceof BlockRandomizationConfig;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public int hashCode() {
		final int PRIME = 59;
		int result = 1;
		result = result * PRIME + super.hashCode();
		result = result * PRIME + this.getMinimum();
		result = result * PRIME + this.getMaximum();
		final java.lang.Object $type = this.getType();
		result = result * PRIME + ($type == null ? 43 : $type.hashCode());
		return result;
	}
}
