// Generated by delombok at Mon Aug 29 15:32:21 MSK 2016
/* 
 * (c) 2008- RANDI2 Core Development Team
 * 
 * This file is part of RANDI2.
 * 
 * RANDI2 is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 * 
 * RANDI2 is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License along with
 * RANDI2. If not, see <http://www.gnu.org/licenses/>.
 */
package de.randi2.model.randomization;

import static de.randi2.utility.IntegerIterator.upto;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.Set;
import javax.persistence.Entity;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import de.randi2.model.AbstractDomainObject;
import de.randi2.model.TreatmentArm;

@Entity
public class Urn extends AbstractDomainObject {
	private static final long serialVersionUID = -7375855875576682823L;

	public static Urn generate(UrnDesignConfig config) {
		Urn urn = new Urn();
		Set<TreatmentArm> arms = config.getTrial().getTreatmentArms();
		for (int i : upto(config.getInitializeCountBalls())) {
			for (TreatmentArm arm : arms) {
				urn.add(arm);
			}
		}
		return urn;
	}

	@ManyToMany
	@JoinTable(name = "Urn_Treatmentarm", joinColumns = {@JoinColumn(name = "Urn_id")}, inverseJoinColumns = {@JoinColumn(name = "Treatmentarm_id")})
	private List<TreatmentArm> urn = new ArrayList<TreatmentArm>();

	public void add(TreatmentArm arm) {
		urn.add(arm);
	}

	public TreatmentArm drawFromUrn(Random rand) {
		return urn.remove(rand.nextInt(urn.size()));
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public Urn() {
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public List<TreatmentArm> getUrn() {
		return this.urn;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setUrn(final List<TreatmentArm> urn) {
		this.urn = urn;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public java.lang.String toString() {
		return "Urn(urn=" + this.getUrn() + ")";
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public boolean equals(final java.lang.Object o) {
		if (o == this) return true;
		if (!(o instanceof Urn)) return false;
		final Urn other = (Urn) o;
		if (!other.canEqual((java.lang.Object) this)) return false;
		if (!super.equals(o)) return false;
		final java.lang.Object this$urn = this.getUrn();
		final java.lang.Object other$urn = other.getUrn();
		if (this$urn == null ? other$urn != null : !this$urn.equals(other$urn)) return false;
		return true;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	protected boolean canEqual(final java.lang.Object other) {
		return other instanceof Urn;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public int hashCode() {
		final int PRIME = 59;
		int result = 1;
		result = result * PRIME + super.hashCode();
		final java.lang.Object $urn = this.getUrn();
		result = result * PRIME + ($urn == null ? 43 : $urn.hashCode());
		return result;
	}
}
