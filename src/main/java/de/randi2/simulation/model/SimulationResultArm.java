// Generated by delombok at Mon Aug 29 15:32:21 MSK 2016
/* 
 * (c) 2008- RANDI2 Core Development Team
 * 
 * This file is part of RANDI2.
 * 
 * RANDI2 is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 * 
 * RANDI2 is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License along with
 * RANDI2. If not, see <http://www.gnu.org/licenses/>.
 */
package de.randi2.simulation.model;

import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import de.randi2.model.TreatmentArm;
import de.randi2.simulation.model.helper.StrataResultWrapper;

/**
 * Represented a result of a simulation in one treatment arm. This class
 * contains different measures like, minimum, maximum, mean and median.
 *
 * @author Daniel Schrimpf <ds@randi2.de>
 */
public class SimulationResultArm {
	private TreatmentArm arm;
	private int min;
	private int max;
	private double mean;
	private double median;
	private Map<String, String> strataIdsNames;
	private Map<String, Integer> strataCountsPerArmMin;
	private Map<String, Integer> strataCountsPerArmMax;
	private Map<String, Double> strataCountsPerArmMean;
	private List<StrataResultWrapper> strataResults;
	private String algorithmName;
	private DecimalFormat f = new DecimalFormat("#0.00");

	public SimulationResultArm(String algorithmName, Map<String, String> strataIdsNames) {
		this.algorithmName = algorithmName;
		this.strataIdsNames = strataIdsNames;
	}

	/**
	 * Returns the difference from planned subjects to minimum subjects in percent.
	 * @return the percent of the difference
	 */
	public double getMinPercent() {
		return ((min * 100.0) / arm.getPlannedSubjects()) - 100;
	}

	/**
	 * Returns the difference from planned subjects to minimum subjects in percent.
	 * @return the percent of the difference
	 */
	public double getMaxPercent() {
		return ((max * 100.0) / arm.getPlannedSubjects()) - 100;
	}

	/**
	 * Returns the difference from planned subjects to minimum subjects in percent as string.
	 * @return a string like XX.XX% (two decimal places)
	 */
	public String getMinPercentString() {
		return f.format(getMinPercent()) + "%";
	}

	/**
	 * Returns the difference from planned subjects to maximum subjects in percent as string.
	 * @return a string like XX.XX% (two decimal places)
	 */
	public String getMaxPercentString() {
		return f.format(getMaxPercent()) + "%";
	}

	public List<StrataResultWrapper> getStrataResults() {
//		if(strataResults == null || strataCountsPerArmMax.keySet().size() != strataResults.size()){
		strataResults = new ArrayList<StrataResultWrapper>();
		for (String strataId : strataCountsPerArmMax.keySet()) {
			StrataResultWrapper strataResult = new StrataResultWrapper();
			strataResult.setStrataId(strataId);
			strataResult.setStrataName(strataIdsNames.get(strataId));
			strataResult.setMaxCount(strataCountsPerArmMax.get(strataId));
			strataResult.setMinCount(strataCountsPerArmMin.get(strataId));
			strataResult.setMean(strataCountsPerArmMean.get(strataId));
			strataResult.setAlgorithmName(algorithmName);
			strataResult.setTreatmentName(arm.getName());
			strataResults.add(strataResult);
		}
//		}
		return strataResults;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public TreatmentArm getArm() {
		return this.arm;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public int getMin() {
		return this.min;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public int getMax() {
		return this.max;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public double getMean() {
		return this.mean;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public double getMedian() {
		return this.median;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public Map<String, String> getStrataIdsNames() {
		return this.strataIdsNames;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public Map<String, Integer> getStrataCountsPerArmMin() {
		return this.strataCountsPerArmMin;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public Map<String, Integer> getStrataCountsPerArmMax() {
		return this.strataCountsPerArmMax;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public Map<String, Double> getStrataCountsPerArmMean() {
		return this.strataCountsPerArmMean;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public String getAlgorithmName() {
		return this.algorithmName;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public DecimalFormat getF() {
		return this.f;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setArm(final TreatmentArm arm) {
		this.arm = arm;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setMin(final int min) {
		this.min = min;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setMax(final int max) {
		this.max = max;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setMean(final double mean) {
		this.mean = mean;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setMedian(final double median) {
		this.median = median;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setStrataIdsNames(final Map<String, String> strataIdsNames) {
		this.strataIdsNames = strataIdsNames;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setStrataCountsPerArmMin(final Map<String, Integer> strataCountsPerArmMin) {
		this.strataCountsPerArmMin = strataCountsPerArmMin;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setStrataCountsPerArmMax(final Map<String, Integer> strataCountsPerArmMax) {
		this.strataCountsPerArmMax = strataCountsPerArmMax;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setStrataCountsPerArmMean(final Map<String, Double> strataCountsPerArmMean) {
		this.strataCountsPerArmMean = strataCountsPerArmMean;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setStrataResults(final List<StrataResultWrapper> strataResults) {
		this.strataResults = strataResults;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setAlgorithmName(final String algorithmName) {
		this.algorithmName = algorithmName;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setF(final DecimalFormat f) {
		this.f = f;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public boolean equals(final java.lang.Object o) {
		if (o == this) return true;
		if (!(o instanceof SimulationResultArm)) return false;
		final SimulationResultArm other = (SimulationResultArm) o;
		if (!other.canEqual((java.lang.Object) this)) return false;
		final java.lang.Object this$arm = this.getArm();
		final java.lang.Object other$arm = other.getArm();
		if (this$arm == null ? other$arm != null : !this$arm.equals(other$arm)) return false;
		if (this.getMin() != other.getMin()) return false;
		if (this.getMax() != other.getMax()) return false;
		if (java.lang.Double.compare(this.getMean(), other.getMean()) != 0) return false;
		if (java.lang.Double.compare(this.getMedian(), other.getMedian()) != 0) return false;
		final java.lang.Object this$strataIdsNames = this.getStrataIdsNames();
		final java.lang.Object other$strataIdsNames = other.getStrataIdsNames();
		if (this$strataIdsNames == null ? other$strataIdsNames != null : !this$strataIdsNames.equals(other$strataIdsNames)) return false;
		final java.lang.Object this$strataCountsPerArmMin = this.getStrataCountsPerArmMin();
		final java.lang.Object other$strataCountsPerArmMin = other.getStrataCountsPerArmMin();
		if (this$strataCountsPerArmMin == null ? other$strataCountsPerArmMin != null : !this$strataCountsPerArmMin.equals(other$strataCountsPerArmMin)) return false;
		final java.lang.Object this$strataCountsPerArmMax = this.getStrataCountsPerArmMax();
		final java.lang.Object other$strataCountsPerArmMax = other.getStrataCountsPerArmMax();
		if (this$strataCountsPerArmMax == null ? other$strataCountsPerArmMax != null : !this$strataCountsPerArmMax.equals(other$strataCountsPerArmMax)) return false;
		final java.lang.Object this$strataCountsPerArmMean = this.getStrataCountsPerArmMean();
		final java.lang.Object other$strataCountsPerArmMean = other.getStrataCountsPerArmMean();
		if (this$strataCountsPerArmMean == null ? other$strataCountsPerArmMean != null : !this$strataCountsPerArmMean.equals(other$strataCountsPerArmMean)) return false;
		final java.lang.Object this$strataResults = this.getStrataResults();
		final java.lang.Object other$strataResults = other.getStrataResults();
		if (this$strataResults == null ? other$strataResults != null : !this$strataResults.equals(other$strataResults)) return false;
		final java.lang.Object this$algorithmName = this.getAlgorithmName();
		final java.lang.Object other$algorithmName = other.getAlgorithmName();
		if (this$algorithmName == null ? other$algorithmName != null : !this$algorithmName.equals(other$algorithmName)) return false;
		final java.lang.Object this$f = this.getF();
		final java.lang.Object other$f = other.getF();
		if (this$f == null ? other$f != null : !this$f.equals(other$f)) return false;
		return true;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	protected boolean canEqual(final java.lang.Object other) {
		return other instanceof SimulationResultArm;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public int hashCode() {
		final int PRIME = 59;
		int result = 1;
		final java.lang.Object $arm = this.getArm();
		result = result * PRIME + ($arm == null ? 43 : $arm.hashCode());
		result = result * PRIME + this.getMin();
		result = result * PRIME + this.getMax();
		final long $mean = java.lang.Double.doubleToLongBits(this.getMean());
		result = result * PRIME + (int) ($mean >>> 32 ^ $mean);
		final long $median = java.lang.Double.doubleToLongBits(this.getMedian());
		result = result * PRIME + (int) ($median >>> 32 ^ $median);
		final java.lang.Object $strataIdsNames = this.getStrataIdsNames();
		result = result * PRIME + ($strataIdsNames == null ? 43 : $strataIdsNames.hashCode());
		final java.lang.Object $strataCountsPerArmMin = this.getStrataCountsPerArmMin();
		result = result * PRIME + ($strataCountsPerArmMin == null ? 43 : $strataCountsPerArmMin.hashCode());
		final java.lang.Object $strataCountsPerArmMax = this.getStrataCountsPerArmMax();
		result = result * PRIME + ($strataCountsPerArmMax == null ? 43 : $strataCountsPerArmMax.hashCode());
		final java.lang.Object $strataCountsPerArmMean = this.getStrataCountsPerArmMean();
		result = result * PRIME + ($strataCountsPerArmMean == null ? 43 : $strataCountsPerArmMean.hashCode());
		final java.lang.Object $strataResults = this.getStrataResults();
		result = result * PRIME + ($strataResults == null ? 43 : $strataResults.hashCode());
		final java.lang.Object $algorithmName = this.getAlgorithmName();
		result = result * PRIME + ($algorithmName == null ? 43 : $algorithmName.hashCode());
		final java.lang.Object $f = this.getF();
		result = result * PRIME + ($f == null ? 43 : $f.hashCode());
		return result;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public java.lang.String toString() {
		return "SimulationResultArm(arm=" + this.getArm() + ", min=" + this.getMin() + ", max=" + this.getMax() + ", mean=" + this.getMean() + ", median=" + this.getMedian() + ", strataIdsNames=" + this.getStrataIdsNames() + ", strataCountsPerArmMin=" + this.getStrataCountsPerArmMin() + ", strataCountsPerArmMax=" + this.getStrataCountsPerArmMax() + ", strataCountsPerArmMean=" + this.getStrataCountsPerArmMean() + ", strataResults=" + this.getStrataResults() + ", algorithmName=" + this.getAlgorithmName() + ", f=" + this.getF() + ")";
	}
}
